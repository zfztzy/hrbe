import type { ColumnType, Key, ColumnsType, DataIndex } from '../components/interface';
export declare const isFunction: (val: any) => boolean;
export declare const isArray: (arg: any) => arg is any[];
export declare const isString: (val: any) => boolean;
export declare const isSymbol: (val: any) => boolean;
export declare const isObject: (val: null) => boolean;
export declare function getColumnKey<RecordType>(column: ColumnType<RecordType>, defaultKey: string): Key;
export declare function getColumnPos(index: number, pos?: string): string;
export declare function getNewColumnsByWidth<RecordType>(columns: ColumnsType<RecordType>, newWidths: Record<string, number>, pos?: string): ColumnsType<RecordType>;
export declare type SortOrder = 'descend' | 'ascend' | null;
export interface ColumnTitleProps<RecordType> {
    /** @deprecated Please use `sorterColumns` instead. */
    sortOrder?: SortOrder;
    /** @deprecated Please use `sorterColumns` instead. */
    sortColumn?: ColumnType<RecordType>;
    sortColumns?: {
        column: ColumnType<RecordType>;
        order: SortOrder;
    }[];
    filters?: Record<string, string[]>;
}
export declare function renderColumnTitle<RecordType>(title: any, props: ColumnTitleProps<RecordType>): any;
export declare function objectToEmpty(obj: Record<string, any>): void;
export declare function getPathValue<ValueType, ObjectType extends object>(record: ObjectType, path: DataIndex): ValueType;
export declare function isValidElement(element: any): boolean;
export declare const parseStyleText: (cssText?: string, camel?: boolean) => {};
export declare const setPromise: (fn: any) => {
    promise: Promise<void>;
    cancel: () => void;
};
export declare function arrDel(list: Key[], value: Key): Key[];
export declare function arrAdd(list: Key[], value: Key): Key[];
export declare function isEmptyElement(c: any): boolean;
declare const isValid: (value: any) => boolean;
export default isValid;
export declare function convertChildrenToColumns<RecordType>(elements?: any[]): ColumnsType<RecordType>;
export declare const eventsClose: (e1: MouseEvent | Touch, e2: MouseEvent | Touch, diff: number) => boolean;
export declare function getNestItemData<T>(data: T[], indexs: number[], childrenColumnName: string): T;
export declare function deleteNestItemData<T>(data: T[], indexs: number[], childrenColumnName: string): any[];
export declare function addNestItemData<T>(data: T[], indexs: number[], childrenColumnName: string, itemData: T): any[];
export declare const isPromise: (promise: Promise<any>) => boolean;
