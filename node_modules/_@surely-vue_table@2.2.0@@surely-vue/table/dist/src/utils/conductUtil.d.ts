import type { Key } from '../components/interface';
export declare type GetCheckDisabled<RecordType> = (record: RecordType) => boolean;
interface ConductReturnType {
    checkedKeys: Key[];
    halfCheckedKeys: Key[];
}
export interface Entity {
    record: any;
    rowKey: Key;
    pos: string;
    parent?: Entity;
    children?: Entity[];
    [key: string]: any;
}
export interface DataEntity extends Omit<Entity, 'parent' | 'children'> {
    parent?: DataEntity;
    children?: DataEntity[];
    level: number;
}
/**
 * Conduct with keys.
 * @param keyList current key list
 * @param keyEntities key - dataEntity map
 * @param mode `fill` to fill missing key, `clean` to remove useless key
 */
export declare function conductCheck(keyList: Key[], checked: true | {
    checked: false;
    halfCheckedKeys: Key[];
}, keyEntities: Record<Key, DataEntity>, levelEntities: Map<number, Set<DataEntity>>, maxLevel: number, getCheckDisabled: GetCheckDisabled<any>): ConductReturnType;
export {};
