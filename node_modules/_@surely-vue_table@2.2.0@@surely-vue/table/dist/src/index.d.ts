import STable from './components/Table';
import type { SurelyTableProps, TablePaginationConfig, ColumnsType, ColumnType, ColumnGroupType, Position } from './components/interface';
import Column from './components/Column.vue';
import SummaryRow from './components/Summary/Row.vue';
import SummaryCell from './components/Summary/Cell.vue';
import Summary from './components/Summary/Summary.vue';
import type { App } from 'vue';
export type { RowHeight } from './components/interface';
import { SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE } from './hooks/useRowSelection';
import ColumnGroup from './components/ColumnGroup.vue';
import { version } from '../package.json';
import { setLicenseKey } from './license/licenseInfo';
export type { SurelyTableProps as STableProps, TablePaginationConfig as STablePaginationConfig, ColumnGroupType as STableColumnGroupType, ColumnType as STableColumnType, ColumnType as STableColumnProps, ColumnsType as STableColumnsType, Position as ScrollPosition, };
declare const install: (app: App) => App<any>;
declare const Table: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            pagination: any;
            rowSelection: any;
        }> & Omit<Readonly<Partial<import("vue").ExtractPropTypes<{
            prefixCls: {
                type: StringConstructor;
                default: string;
            };
            columnDrag: {
                type: BooleanConstructor;
                default: boolean;
            };
            animateRows: {
                type: BooleanConstructor;
                default: boolean;
            };
            dropdownPrefixCls: {
                type: StringConstructor;
                default: string;
            };
            columns: {
                type: import("vue").PropType<ColumnsType<import("./components/interface").DefaultRecordType>>;
                default: ColumnsType<import("./components/interface").DefaultRecordType>;
            };
            dataSource: {
                type: import("vue").PropType<import("./components/interface").DefaultRecordType[]>;
                default: () => import("./components/interface").DefaultRecordType[];
            };
            virtual: {
                type: BooleanConstructor;
                default: any;
            };
            rowHeight: {
                type: import("vue").PropType<import("./components/interface").RowHeight>;
                default: any;
            };
            headerHeight: {
                type: import("vue").PropType<import("./components/interface").HeaderHeight>;
            };
            height: {
                type: (StringConstructor | NumberConstructor)[];
            };
            maxHeight: {
                type: (StringConstructor | NumberConstructor)[];
            };
            size: {
                type: import("vue").PropType<"middle" | "small" | "default">;
                default: string;
            };
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            wrapText: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: import("vue").PropType<boolean | Partial<import("vue").ExtractPropTypes<{
                    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                        default: string;
                    };
                    spinning: import("vue-types").VueTypeValidableDef<boolean>;
                    size: import("vue-types").VueTypeDef<"small" | "default" | "large">;
                    wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                        default: string;
                    };
                    tip: import("vue-types").VueTypeValidableDef<any>;
                    delay: import("vue-types").VueTypeValidableDef<number> & {
                        default: number;
                    };
                    indicator: import("vue-types").VueTypeValidableDef<any>;
                }>>>;
                default: boolean | Partial<import("vue").ExtractPropTypes<{
                    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                        default: string;
                    };
                    spinning: import("vue-types").VueTypeValidableDef<boolean>;
                    size: import("vue-types").VueTypeDef<"small" | "default" | "large">;
                    wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                        default: string;
                    };
                    tip: import("vue-types").VueTypeValidableDef<any>;
                    delay: import("vue-types").VueTypeValidableDef<number> & {
                        default: number;
                    };
                    indicator: import("vue-types").VueTypeValidableDef<any>;
                }>>;
            };
            pagination: {
                type: import("vue").PropType<false | TablePaginationConfig>;
                default: any;
            };
            direction: {
                type: import("vue").PropType<"rtl">;
                default: any;
            };
            stripe: {
                type: BooleanConstructor;
                default: boolean;
            };
            rowClassName: {
                type: import("vue").PropType<string | import("./components/interface").RowClassName<import("./components/interface").DefaultRecordType>>;
                default: any;
            };
            sticky: {
                type: import("vue").PropType<boolean | import("./components/interface").HeaderSticky>;
                default: boolean;
            };
            selectedRowKeys: {
                type: import("vue").PropType<import("./components/interface").Key[]>;
                default: any;
            };
            expandFixed: {
                type: import("vue").PropType<import("./components/interface").FixedType>;
                default: any;
            };
            expandColumnWidth: {
                type: NumberConstructor;
                default: any;
            };
            expandedRowKeys: {
                type: import("vue").PropType<import("./components/interface").Key[]>;
                default: import("./components/interface").Key[];
            };
            defaultExpandedRowKeys: {
                type: import("vue").PropType<import("./components/interface").Key[]>;
                default: import("./components/interface").Key[];
            };
            expandedRowRender: {
                type: import("vue").PropType<import("./components/interface").ExpandedRowRender<import("./components/interface").DefaultRecordType>>;
                default: any;
            };
            expandRowByClick: {
                type: BooleanConstructor;
                default: any;
            };
            expandIcon: {
                type: import("vue").PropType<import("./components/interface").RenderExpandIcon<import("./components/interface").DefaultRecordType>>;
                default: any;
            };
            defaultExpandAllRows: {
                type: BooleanConstructor;
                default: any;
            };
            indentSize: NumberConstructor;
            expandIconColumnIndex: NumberConstructor;
            childrenColumnName: {
                type: StringConstructor;
                default: any;
            };
            rowExpandable: {
                type: import("vue").PropType<(record: import("./components/interface").DefaultRecordType) => boolean>;
                default: () => boolean;
            };
            rowSelection: {
                type: import("vue").PropType<import("./components/interface").TableRowSelection<import("./components/interface").DefaultRecordType>>;
                default: any;
            };
            rowHoverDelay: {
                type: NumberConstructor;
                default: number;
            };
            rowKey: {
                type: import("vue").PropType<string | import("./components/interface").GetRowKey<import("./components/interface").DefaultRecordType>>;
            };
            customRow: {
                type: import("vue").PropType<(data: import("./components/interface").DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
                    style?: import("vue").CSSProperties;
                }>;
                default: () => {};
            };
            customCell: {
                type: import("vue").PropType<(obj: {
                    record: import("./components/interface").DefaultRecordType;
                    rowIndex: number;
                    column: ColumnType<import("./components/interface").DefaultRecordType>;
                }) => Record<string, any>>;
                default: () => Record<string, any>;
            };
            customHeaderCell: {
                type: import("vue").PropType<(column: ColumnType<import("./components/interface").DefaultRecordType>) => Record<string, any>>;
                default: () => Record<string, any>;
            };
            customSummaryCellProps: {
                type: import("vue").PropType<(obj: {
                    record: import("./components/interface").DefaultRecordType;
                    rowIndex: number;
                    column: ColumnType<import("./components/interface").DefaultRecordType>;
                    columnIndex: number;
                }) => Record<string, any>>;
                default: () => Record<string, any>;
            };
            showHeader: {
                type: BooleanConstructor;
                default: boolean;
            };
            showSorterTooltip: {
                type: BooleanConstructor;
                default: boolean;
            };
            getPopupContainer: {
                type: import("vue").PropType<import("./components/interface").GetPopupContainer>;
            };
            locale: {
                type: import("vue").PropType<import("./components/interface").TableLocale>;
                default: import("./components/interface").TableLocale;
            };
            scrollX: {
                type: import("vue").PropType<string | number>;
            };
            scroll: {
                type: import("vue").PropType<{
                    x?: string | number;
                    y?: string | number;
                    scrollToFirstRowOnChange?: boolean;
                }>;
                default: {
                    x?: string | number;
                    y?: string | number;
                    scrollToFirstRowOnChange?: boolean;
                };
            };
            rowDrag: {
                type: BooleanConstructor[];
            };
            onChange: {
                type: import("vue").PropType<(pagination: TablePaginationConfig, filters: Record<string, import("./components/interface").FilterValue>, sorter: import("./components/interface").SorterResult<import("./components/interface").DefaultRecordType> | import("./components/interface").SorterResult<import("./components/interface").DefaultRecordType>[], extra: import("./components/interface").TableCurrentDataSource<import("./components/interface").DefaultRecordType>) => void>;
            };
            summaryFixed: {
                type: BooleanConstructor;
            };
            'onUpdate:selectedRowKeys': {
                type: import("vue").PropType<(selectedRowKeys: import("./components/interface").Key[], selectedRows: import("./components/interface").DefaultRecordType[]) => void>;
            };
            onScroll: {
                type: import("vue").PropType<(e: UIEvent) => void>;
            };
            'onUpdate:expandedRowKeys': {
                type: import("vue").PropType<(info: import("./components/interface").Key[]) => void>;
            };
            onResizeColumn: {
                type: import("vue").PropType<(w: number, col: ColumnType<import("./components/interface").DefaultRecordType>, action: import("./components/interface").ResizeActionType) => boolean | void>;
                default: any;
            };
            onRowDragEnd: {
                type: import("vue").PropType<(opt: import("./components/interface").DragRowEventInfo) => boolean | void | Promise<any>>;
                default: any;
            };
            onColumnDragEnd: {
                type: import("vue").PropType<(opt: import("./components/interface").DragColumnEventInfo) => boolean | void | Promise<any>>;
                default: any;
            };
            'onUpdate:pagination': {
                type: import("vue").PropType<(info: TablePaginationConfig) => void>;
            };
        }>>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "pagination" | "rowSelection">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<Partial<import("vue").ExtractPropTypes<{
            prefixCls: {
                type: StringConstructor;
                default: string;
            };
            columnDrag: {
                type: BooleanConstructor;
                default: boolean;
            };
            animateRows: {
                type: BooleanConstructor;
                default: boolean;
            };
            dropdownPrefixCls: {
                type: StringConstructor;
                default: string;
            };
            columns: {
                type: import("vue").PropType<ColumnsType<import("./components/interface").DefaultRecordType>>;
                default: ColumnsType<import("./components/interface").DefaultRecordType>;
            };
            dataSource: {
                type: import("vue").PropType<import("./components/interface").DefaultRecordType[]>;
                default: () => import("./components/interface").DefaultRecordType[];
            };
            virtual: {
                type: BooleanConstructor;
                default: any;
            };
            rowHeight: {
                type: import("vue").PropType<import("./components/interface").RowHeight>;
                default: any;
            };
            headerHeight: {
                type: import("vue").PropType<import("./components/interface").HeaderHeight>;
            };
            height: {
                type: (StringConstructor | NumberConstructor)[];
            };
            maxHeight: {
                type: (StringConstructor | NumberConstructor)[];
            };
            size: {
                type: import("vue").PropType<"middle" | "small" | "default">;
                default: string;
            };
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            wrapText: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: import("vue").PropType<boolean | Partial<import("vue").ExtractPropTypes<{
                    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                        default: string;
                    };
                    spinning: import("vue-types").VueTypeValidableDef<boolean>;
                    size: import("vue-types").VueTypeDef<"small" | "default" | "large">;
                    wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                        default: string;
                    };
                    tip: import("vue-types").VueTypeValidableDef<any>;
                    delay: import("vue-types").VueTypeValidableDef<number> & {
                        default: number;
                    };
                    indicator: import("vue-types").VueTypeValidableDef<any>;
                }>>>;
                default: boolean | Partial<import("vue").ExtractPropTypes<{
                    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                        default: string;
                    };
                    spinning: import("vue-types").VueTypeValidableDef<boolean>;
                    size: import("vue-types").VueTypeDef<"small" | "default" | "large">;
                    wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                        default: string;
                    };
                    tip: import("vue-types").VueTypeValidableDef<any>;
                    delay: import("vue-types").VueTypeValidableDef<number> & {
                        default: number;
                    };
                    indicator: import("vue-types").VueTypeValidableDef<any>;
                }>>;
            };
            pagination: {
                type: import("vue").PropType<false | TablePaginationConfig>;
                default: any;
            };
            direction: {
                type: import("vue").PropType<"rtl">;
                default: any;
            };
            stripe: {
                type: BooleanConstructor;
                default: boolean;
            };
            rowClassName: {
                type: import("vue").PropType<string | import("./components/interface").RowClassName<import("./components/interface").DefaultRecordType>>;
                default: any;
            };
            sticky: {
                type: import("vue").PropType<boolean | import("./components/interface").HeaderSticky>;
                default: boolean;
            };
            selectedRowKeys: {
                type: import("vue").PropType<import("./components/interface").Key[]>;
                default: any;
            };
            expandFixed: {
                type: import("vue").PropType<import("./components/interface").FixedType>;
                default: any;
            };
            expandColumnWidth: {
                type: NumberConstructor;
                default: any;
            };
            expandedRowKeys: {
                type: import("vue").PropType<import("./components/interface").Key[]>;
                default: import("./components/interface").Key[];
            };
            defaultExpandedRowKeys: {
                type: import("vue").PropType<import("./components/interface").Key[]>;
                default: import("./components/interface").Key[];
            };
            expandedRowRender: {
                type: import("vue").PropType<import("./components/interface").ExpandedRowRender<import("./components/interface").DefaultRecordType>>;
                default: any;
            };
            expandRowByClick: {
                type: BooleanConstructor;
                default: any;
            };
            expandIcon: {
                type: import("vue").PropType<import("./components/interface").RenderExpandIcon<import("./components/interface").DefaultRecordType>>;
                default: any;
            };
            defaultExpandAllRows: {
                type: BooleanConstructor;
                default: any;
            };
            indentSize: NumberConstructor;
            expandIconColumnIndex: NumberConstructor;
            childrenColumnName: {
                type: StringConstructor;
                default: any;
            };
            rowExpandable: {
                type: import("vue").PropType<(record: import("./components/interface").DefaultRecordType) => boolean>;
                default: () => boolean;
            };
            rowSelection: {
                type: import("vue").PropType<import("./components/interface").TableRowSelection<import("./components/interface").DefaultRecordType>>;
                default: any;
            };
            rowHoverDelay: {
                type: NumberConstructor;
                default: number;
            };
            rowKey: {
                type: import("vue").PropType<string | import("./components/interface").GetRowKey<import("./components/interface").DefaultRecordType>>;
            };
            customRow: {
                type: import("vue").PropType<(data: import("./components/interface").DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
                    style?: import("vue").CSSProperties;
                }>;
                default: () => {};
            };
            customCell: {
                type: import("vue").PropType<(obj: {
                    record: import("./components/interface").DefaultRecordType;
                    rowIndex: number;
                    column: ColumnType<import("./components/interface").DefaultRecordType>;
                }) => Record<string, any>>;
                default: () => Record<string, any>;
            };
            customHeaderCell: {
                type: import("vue").PropType<(column: ColumnType<import("./components/interface").DefaultRecordType>) => Record<string, any>>;
                default: () => Record<string, any>;
            };
            customSummaryCellProps: {
                type: import("vue").PropType<(obj: {
                    record: import("./components/interface").DefaultRecordType;
                    rowIndex: number;
                    column: ColumnType<import("./components/interface").DefaultRecordType>;
                    columnIndex: number;
                }) => Record<string, any>>;
                default: () => Record<string, any>;
            };
            showHeader: {
                type: BooleanConstructor;
                default: boolean;
            };
            showSorterTooltip: {
                type: BooleanConstructor;
                default: boolean;
            };
            getPopupContainer: {
                type: import("vue").PropType<import("./components/interface").GetPopupContainer>;
            };
            locale: {
                type: import("vue").PropType<import("./components/interface").TableLocale>;
                default: import("./components/interface").TableLocale;
            };
            scrollX: {
                type: import("vue").PropType<string | number>;
            };
            scroll: {
                type: import("vue").PropType<{
                    x?: string | number;
                    y?: string | number;
                    scrollToFirstRowOnChange?: boolean;
                }>;
                default: {
                    x?: string | number;
                    y?: string | number;
                    scrollToFirstRowOnChange?: boolean;
                };
            };
            rowDrag: {
                type: BooleanConstructor[];
            };
            onChange: {
                type: import("vue").PropType<(pagination: TablePaginationConfig, filters: Record<string, import("./components/interface").FilterValue>, sorter: import("./components/interface").SorterResult<import("./components/interface").DefaultRecordType> | import("./components/interface").SorterResult<import("./components/interface").DefaultRecordType>[], extra: import("./components/interface").TableCurrentDataSource<import("./components/interface").DefaultRecordType>) => void>;
            };
            summaryFixed: {
                type: BooleanConstructor;
            };
            'onUpdate:selectedRowKeys': {
                type: import("vue").PropType<(selectedRowKeys: import("./components/interface").Key[], selectedRows: import("./components/interface").DefaultRecordType[]) => void>;
            };
            onScroll: {
                type: import("vue").PropType<(e: UIEvent) => void>;
            };
            'onUpdate:expandedRowKeys': {
                type: import("vue").PropType<(info: import("./components/interface").Key[]) => void>;
            };
            onResizeColumn: {
                type: import("vue").PropType<(w: number, col: ColumnType<import("./components/interface").DefaultRecordType>, action: import("./components/interface").ResizeActionType) => boolean | void>;
                default: any;
            };
            onRowDragEnd: {
                type: import("vue").PropType<(opt: import("./components/interface").DragRowEventInfo) => boolean | void | Promise<any>>;
                default: any;
            };
            onColumnDragEnd: {
                type: import("vue").PropType<(opt: import("./components/interface").DragColumnEventInfo) => boolean | void | Promise<any>>;
                default: any;
            };
            'onUpdate:pagination': {
                type: import("vue").PropType<(info: TablePaginationConfig) => void>;
            };
        }>>>, Omit<import("./components/interface").TableExposeType, "scrollTo">, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
            pagination: any;
            rowSelection: any;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<Partial<import("vue").ExtractPropTypes<{
        prefixCls: {
            type: StringConstructor;
            default: string;
        };
        columnDrag: {
            type: BooleanConstructor;
            default: boolean;
        };
        animateRows: {
            type: BooleanConstructor;
            default: boolean;
        };
        dropdownPrefixCls: {
            type: StringConstructor;
            default: string;
        };
        columns: {
            type: import("vue").PropType<ColumnsType<import("./components/interface").DefaultRecordType>>;
            default: ColumnsType<import("./components/interface").DefaultRecordType>;
        };
        dataSource: {
            type: import("vue").PropType<import("./components/interface").DefaultRecordType[]>;
            default: () => import("./components/interface").DefaultRecordType[];
        };
        virtual: {
            type: BooleanConstructor;
            default: any;
        };
        rowHeight: {
            type: import("vue").PropType<import("./components/interface").RowHeight>;
            default: any;
        };
        headerHeight: {
            type: import("vue").PropType<import("./components/interface").HeaderHeight>;
        };
        height: {
            type: (StringConstructor | NumberConstructor)[];
        };
        maxHeight: {
            type: (StringConstructor | NumberConstructor)[];
        };
        size: {
            type: import("vue").PropType<"middle" | "small" | "default">;
            default: string;
        };
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        wrapText: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: import("vue").PropType<boolean | Partial<import("vue").ExtractPropTypes<{
                prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                    default: string;
                };
                spinning: import("vue-types").VueTypeValidableDef<boolean>;
                size: import("vue-types").VueTypeDef<"small" | "default" | "large">;
                wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                    default: string;
                };
                tip: import("vue-types").VueTypeValidableDef<any>;
                delay: import("vue-types").VueTypeValidableDef<number> & {
                    default: number;
                };
                indicator: import("vue-types").VueTypeValidableDef<any>;
            }>>>;
            default: boolean | Partial<import("vue").ExtractPropTypes<{
                prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                    default: string;
                };
                spinning: import("vue-types").VueTypeValidableDef<boolean>;
                size: import("vue-types").VueTypeDef<"small" | "default" | "large">;
                wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                    default: string;
                };
                tip: import("vue-types").VueTypeValidableDef<any>;
                delay: import("vue-types").VueTypeValidableDef<number> & {
                    default: number;
                };
                indicator: import("vue-types").VueTypeValidableDef<any>;
            }>>;
        };
        pagination: {
            type: import("vue").PropType<false | TablePaginationConfig>;
            default: any;
        };
        direction: {
            type: import("vue").PropType<"rtl">;
            default: any;
        };
        stripe: {
            type: BooleanConstructor;
            default: boolean;
        };
        rowClassName: {
            type: import("vue").PropType<string | import("./components/interface").RowClassName<import("./components/interface").DefaultRecordType>>;
            default: any;
        };
        sticky: {
            type: import("vue").PropType<boolean | import("./components/interface").HeaderSticky>;
            default: boolean;
        };
        selectedRowKeys: {
            type: import("vue").PropType<import("./components/interface").Key[]>;
            default: any;
        };
        expandFixed: {
            type: import("vue").PropType<import("./components/interface").FixedType>;
            default: any;
        };
        expandColumnWidth: {
            type: NumberConstructor;
            default: any;
        };
        expandedRowKeys: {
            type: import("vue").PropType<import("./components/interface").Key[]>;
            default: import("./components/interface").Key[];
        };
        defaultExpandedRowKeys: {
            type: import("vue").PropType<import("./components/interface").Key[]>;
            default: import("./components/interface").Key[];
        };
        expandedRowRender: {
            type: import("vue").PropType<import("./components/interface").ExpandedRowRender<import("./components/interface").DefaultRecordType>>;
            default: any;
        };
        expandRowByClick: {
            type: BooleanConstructor;
            default: any;
        };
        expandIcon: {
            type: import("vue").PropType<import("./components/interface").RenderExpandIcon<import("./components/interface").DefaultRecordType>>;
            default: any;
        };
        defaultExpandAllRows: {
            type: BooleanConstructor;
            default: any;
        };
        indentSize: NumberConstructor;
        expandIconColumnIndex: NumberConstructor;
        childrenColumnName: {
            type: StringConstructor;
            default: any;
        };
        rowExpandable: {
            type: import("vue").PropType<(record: import("./components/interface").DefaultRecordType) => boolean>;
            default: () => boolean;
        };
        rowSelection: {
            type: import("vue").PropType<import("./components/interface").TableRowSelection<import("./components/interface").DefaultRecordType>>;
            default: any;
        };
        rowHoverDelay: {
            type: NumberConstructor;
            default: number;
        };
        rowKey: {
            type: import("vue").PropType<string | import("./components/interface").GetRowKey<import("./components/interface").DefaultRecordType>>;
        };
        customRow: {
            type: import("vue").PropType<(data: import("./components/interface").DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
                style?: import("vue").CSSProperties;
            }>;
            default: () => {};
        };
        customCell: {
            type: import("vue").PropType<(obj: {
                record: import("./components/interface").DefaultRecordType;
                rowIndex: number;
                column: ColumnType<import("./components/interface").DefaultRecordType>;
            }) => Record<string, any>>;
            default: () => Record<string, any>;
        };
        customHeaderCell: {
            type: import("vue").PropType<(column: ColumnType<import("./components/interface").DefaultRecordType>) => Record<string, any>>;
            default: () => Record<string, any>;
        };
        customSummaryCellProps: {
            type: import("vue").PropType<(obj: {
                record: import("./components/interface").DefaultRecordType;
                rowIndex: number;
                column: ColumnType<import("./components/interface").DefaultRecordType>;
                columnIndex: number;
            }) => Record<string, any>>;
            default: () => Record<string, any>;
        };
        showHeader: {
            type: BooleanConstructor;
            default: boolean;
        };
        showSorterTooltip: {
            type: BooleanConstructor;
            default: boolean;
        };
        getPopupContainer: {
            type: import("vue").PropType<import("./components/interface").GetPopupContainer>;
        };
        locale: {
            type: import("vue").PropType<import("./components/interface").TableLocale>;
            default: import("./components/interface").TableLocale;
        };
        scrollX: {
            type: import("vue").PropType<string | number>;
        };
        scroll: {
            type: import("vue").PropType<{
                x?: string | number;
                y?: string | number;
                scrollToFirstRowOnChange?: boolean;
            }>;
            default: {
                x?: string | number;
                y?: string | number;
                scrollToFirstRowOnChange?: boolean;
            };
        };
        rowDrag: {
            type: BooleanConstructor[];
        };
        onChange: {
            type: import("vue").PropType<(pagination: TablePaginationConfig, filters: Record<string, import("./components/interface").FilterValue>, sorter: import("./components/interface").SorterResult<import("./components/interface").DefaultRecordType> | import("./components/interface").SorterResult<import("./components/interface").DefaultRecordType>[], extra: import("./components/interface").TableCurrentDataSource<import("./components/interface").DefaultRecordType>) => void>;
        };
        summaryFixed: {
            type: BooleanConstructor;
        };
        'onUpdate:selectedRowKeys': {
            type: import("vue").PropType<(selectedRowKeys: import("./components/interface").Key[], selectedRows: import("./components/interface").DefaultRecordType[]) => void>;
        };
        onScroll: {
            type: import("vue").PropType<(e: UIEvent) => void>;
        };
        'onUpdate:expandedRowKeys': {
            type: import("vue").PropType<(info: import("./components/interface").Key[]) => void>;
        };
        onResizeColumn: {
            type: import("vue").PropType<(w: number, col: ColumnType<import("./components/interface").DefaultRecordType>, action: import("./components/interface").ResizeActionType) => boolean | void>;
            default: any;
        };
        onRowDragEnd: {
            type: import("vue").PropType<(opt: import("./components/interface").DragRowEventInfo) => boolean | void | Promise<any>>;
            default: any;
        };
        onColumnDragEnd: {
            type: import("vue").PropType<(opt: import("./components/interface").DragColumnEventInfo) => boolean | void | Promise<any>>;
            default: any;
        };
        'onUpdate:pagination': {
            type: import("vue").PropType<(info: TablePaginationConfig) => void>;
        };
    }>>> & import("vue").ShallowUnwrapRef<Omit<import("./components/interface").TableExposeType, "scrollTo">> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<Partial<import("vue").ExtractPropTypes<{
    prefixCls: {
        type: StringConstructor;
        default: string;
    };
    columnDrag: {
        type: BooleanConstructor;
        default: boolean;
    };
    animateRows: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropdownPrefixCls: {
        type: StringConstructor;
        default: string;
    };
    columns: {
        type: import("vue").PropType<ColumnsType<import("./components/interface").DefaultRecordType>>;
        default: ColumnsType<import("./components/interface").DefaultRecordType>;
    };
    dataSource: {
        type: import("vue").PropType<import("./components/interface").DefaultRecordType[]>;
        default: () => import("./components/interface").DefaultRecordType[];
    };
    virtual: {
        type: BooleanConstructor;
        default: any;
    };
    rowHeight: {
        type: import("vue").PropType<import("./components/interface").RowHeight>;
        default: any;
    };
    headerHeight: {
        type: import("vue").PropType<import("./components/interface").HeaderHeight>;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
    };
    size: {
        type: import("vue").PropType<"middle" | "small" | "default">;
        default: string;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: import("vue").PropType<boolean | Partial<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            spinning: import("vue-types").VueTypeValidableDef<boolean>;
            size: import("vue-types").VueTypeDef<"small" | "default" | "large">;
            wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>>;
        default: boolean | Partial<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            spinning: import("vue-types").VueTypeValidableDef<boolean>;
            size: import("vue-types").VueTypeDef<"small" | "default" | "large">;
            wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>;
    };
    pagination: {
        type: import("vue").PropType<false | TablePaginationConfig>;
        default: any;
    };
    direction: {
        type: import("vue").PropType<"rtl">;
        default: any;
    };
    stripe: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowClassName: {
        type: import("vue").PropType<string | import("./components/interface").RowClassName<import("./components/interface").DefaultRecordType>>;
        default: any;
    };
    sticky: {
        type: import("vue").PropType<boolean | import("./components/interface").HeaderSticky>;
        default: boolean;
    };
    selectedRowKeys: {
        type: import("vue").PropType<import("./components/interface").Key[]>;
        default: any;
    };
    expandFixed: {
        type: import("vue").PropType<import("./components/interface").FixedType>;
        default: any;
    };
    expandColumnWidth: {
        type: NumberConstructor;
        default: any;
    };
    expandedRowKeys: {
        type: import("vue").PropType<import("./components/interface").Key[]>;
        default: import("./components/interface").Key[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<import("./components/interface").Key[]>;
        default: import("./components/interface").Key[];
    };
    expandedRowRender: {
        type: import("vue").PropType<import("./components/interface").ExpandedRowRender<import("./components/interface").DefaultRecordType>>;
        default: any;
    };
    expandRowByClick: {
        type: BooleanConstructor;
        default: any;
    };
    expandIcon: {
        type: import("vue").PropType<import("./components/interface").RenderExpandIcon<import("./components/interface").DefaultRecordType>>;
        default: any;
    };
    defaultExpandAllRows: {
        type: BooleanConstructor;
        default: any;
    };
    indentSize: NumberConstructor;
    expandIconColumnIndex: NumberConstructor;
    childrenColumnName: {
        type: StringConstructor;
        default: any;
    };
    rowExpandable: {
        type: import("vue").PropType<(record: import("./components/interface").DefaultRecordType) => boolean>;
        default: () => boolean;
    };
    rowSelection: {
        type: import("vue").PropType<import("./components/interface").TableRowSelection<import("./components/interface").DefaultRecordType>>;
        default: any;
    };
    rowHoverDelay: {
        type: NumberConstructor;
        default: number;
    };
    rowKey: {
        type: import("vue").PropType<string | import("./components/interface").GetRowKey<import("./components/interface").DefaultRecordType>>;
    };
    customRow: {
        type: import("vue").PropType<(data: import("./components/interface").DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
            style?: import("vue").CSSProperties;
        }>;
        default: () => {};
    };
    customCell: {
        type: import("vue").PropType<(obj: {
            record: import("./components/interface").DefaultRecordType;
            rowIndex: number;
            column: ColumnType<import("./components/interface").DefaultRecordType>;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customHeaderCell: {
        type: import("vue").PropType<(column: ColumnType<import("./components/interface").DefaultRecordType>) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customSummaryCellProps: {
        type: import("vue").PropType<(obj: {
            record: import("./components/interface").DefaultRecordType;
            rowIndex: number;
            column: ColumnType<import("./components/interface").DefaultRecordType>;
            columnIndex: number;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSorterTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    getPopupContainer: {
        type: import("vue").PropType<import("./components/interface").GetPopupContainer>;
    };
    locale: {
        type: import("vue").PropType<import("./components/interface").TableLocale>;
        default: import("./components/interface").TableLocale;
    };
    scrollX: {
        type: import("vue").PropType<string | number>;
    };
    scroll: {
        type: import("vue").PropType<{
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        }>;
        default: {
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        };
    };
    rowDrag: {
        type: BooleanConstructor[];
    };
    onChange: {
        type: import("vue").PropType<(pagination: TablePaginationConfig, filters: Record<string, import("./components/interface").FilterValue>, sorter: import("./components/interface").SorterResult<import("./components/interface").DefaultRecordType> | import("./components/interface").SorterResult<import("./components/interface").DefaultRecordType>[], extra: import("./components/interface").TableCurrentDataSource<import("./components/interface").DefaultRecordType>) => void>;
    };
    summaryFixed: {
        type: BooleanConstructor;
    };
    'onUpdate:selectedRowKeys': {
        type: import("vue").PropType<(selectedRowKeys: import("./components/interface").Key[], selectedRows: import("./components/interface").DefaultRecordType[]) => void>;
    };
    onScroll: {
        type: import("vue").PropType<(e: UIEvent) => void>;
    };
    'onUpdate:expandedRowKeys': {
        type: import("vue").PropType<(info: import("./components/interface").Key[]) => void>;
    };
    onResizeColumn: {
        type: import("vue").PropType<(w: number, col: ColumnType<import("./components/interface").DefaultRecordType>, action: import("./components/interface").ResizeActionType) => boolean | void>;
        default: any;
    };
    onRowDragEnd: {
        type: import("vue").PropType<(opt: import("./components/interface").DragRowEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    onColumnDragEnd: {
        type: import("vue").PropType<(opt: import("./components/interface").DragColumnEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    'onUpdate:pagination': {
        type: import("vue").PropType<(info: TablePaginationConfig) => void>;
    };
}>>>, Omit<import("./components/interface").TableExposeType, "scrollTo">, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
    pagination: any;
    rowSelection: any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    SELECTION_ALL: "SELECT_ALL";
    SELECTION_INVERT: "SELECT_INVERT";
    SELECTION_NONE: "SELECT_NONE";
    Column: import("vue").DefineComponent<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<any>, {} | {
        [x: string]: any;
    }>;
    ColumnGroup: import("vue").DefineComponent<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<any>, {} | {
        [x: string]: any;
    }>;
    Summary: import("vue").DefineComponent<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<any>, {} | {
        [x: string]: any;
    }>;
    SummaryRow: import("vue").DefineComponent<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<any>, {} | {
        [x: string]: any;
    }>;
    SummaryCell: import("vue").DefineComponent<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<any>, {} | {
        [x: string]: any;
    }>;
    version: string;
    setLicenseKey: (key: string) => void;
    install: (app: App) => App<any>;
};
export { STable, Column as STableColumn, ColumnGroup as STableColumnGroup, Summary as STableSummary, SummaryRow as STableSummaryRow, SummaryCell as STableSummaryCell, SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE, setLicenseKey, install, version, };
export default Table;
