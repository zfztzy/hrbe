import type { CSSProperties, PropType } from 'vue';
import type { RowType } from '../interface';
declare const _default: import("vue").DefineComponent<{
    prefixCls: StringConstructor;
    wrapText: {
        type: PropType<boolean>;
        default: boolean;
    };
    type: PropType<"left" | "center" | "right">;
}, {
    fixLeftClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    fixRightClass: import("vue").ComputedRef<{
        [x: string]: number | boolean;
    }>;
    centerClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    containerClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    viewportClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    rightStyle: import("vue").ComputedRef<CSSProperties>;
    centerStyle: import("vue").ComputedRef<{}>;
    leftStyle: import("vue").ComputedRef<CSSProperties>;
    containerStyle: import("vue").ComputedRef<CSSProperties>;
    centerColumns: import("vue").ComputedRef<import("../interface").FinallyColumnType<import("../interface").DefaultRecordType>[]>;
    headerRef: import("vue").Ref<any>;
    centerContainerRef: import("vue").Ref<any>;
    leftGap: (type: RowType) => number;
    visibleCenterHeaderColumns: import("vue").ComputedRef<import("../interface").FinallyColumnType<import("../interface").DefaultRecordType>[]>;
    leftColumns: import("vue").ComputedRef<import("../interface").FinallyColumnType<import("../interface").DefaultRecordType>[]>;
    rightColumns: import("vue").ComputedRef<import("../interface").FinallyColumnType<import("../interface").DefaultRecordType>[]>;
    dragColumnPlaceholderRef: import("vue").Ref<HTMLSpanElement>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: StringConstructor;
    wrapText: {
        type: PropType<boolean>;
        default: boolean;
    };
    type: PropType<"left" | "center" | "right">;
}>>, {
    wrapText: boolean;
}>;
export default _default;
