import type { PropType } from 'vue';
import type { FinallyColumnType, SortOrder } from '../interface';
declare const _default: import("vue").DefineComponent<{
    prefixCls: StringConstructor;
    column: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>>;
        default: () => FinallyColumnType<import("../interface").DefaultRecordType>;
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    level: {
        type: NumberConstructor;
        default: number;
    };
}, {
    tableContext: import("../context/TableContext").TableContextProps;
    sorterInfo: import("vue").ComputedRef<{
        showSorterTooltip: boolean;
        columnKey: import("../interface").Key;
        sorterState: import("../../hooks/useSorter").SortState<any>;
        sorterOrder: SortOrder;
        sortDirections: SortOrder[];
        nextSortOrder: SortOrder;
        tip: string;
        showFilter: boolean;
        wrapText: boolean;
    }>;
    handleSortClick: (column: FinallyColumnType<any>, nextSortOrder: SortOrder) => void;
    cellClass: import("vue").ComputedRef<{
        [x: string]: boolean | SortOrder | import("../interface").CompareFn<import("../interface").DefaultRecordType> | {
            compare?: import("../interface").CompareFn<import("../interface").DefaultRecordType>;
            multiple?: number;
        };
    }>;
    widths: import("vue").ComputedRef<{
        width: number;
        left: number;
        minWidth: number;
        maxWidth: number;
    }>;
    colProps: import("vue").ComputedRef<Record<string, any> & {
        colspan: number;
        colstart: number;
        colend: number;
    }>;
    RenderSlot: import("vue").FunctionalComponent<any, {}>;
    titleClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    domRef: import("vue").Ref<HTMLDivElement>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: StringConstructor;
    column: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>>;
        default: () => FinallyColumnType<import("../interface").DefaultRecordType>;
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    level: {
        type: NumberConstructor;
        default: number;
    };
}>>, {
    column: FinallyColumnType<import("../interface").DefaultRecordType>;
    wrapText: boolean;
    level: number;
}>;
export default _default;
