import type { PropType } from 'vue';
import type { FinallyColumnType, RowType } from '../interface';
declare const _default: import("vue").DefineComponent<{
    type: {
        type: PropType<RowType>;
    };
    leftGap: {
        type: NumberConstructor;
        required: true;
    };
    isRoot: BooleanConstructor;
    prefixCls: StringConstructor;
    columns: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>[]>;
        default: () => any[];
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    level: {
        type: NumberConstructor;
        default: number;
    };
}, {
    cellClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    cellStyles: import("vue").Ref<{
        [x: string]: string;
    }>;
    getLastColumn: (column: FinallyColumnType) => FinallyColumnType;
    cellProps: (column: any) => any;
    draggingColumnKey: import("vue").ComputedRef<import("../interface").Key>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: PropType<RowType>;
    };
    leftGap: {
        type: NumberConstructor;
        required: true;
    };
    isRoot: BooleanConstructor;
    prefixCls: StringConstructor;
    columns: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>[]>;
        default: () => any[];
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    level: {
        type: NumberConstructor;
        default: number;
    };
}>>, {
    isRoot: boolean;
    columns: FinallyColumnType<import("../interface").DefaultRecordType>[];
    wrapText: boolean;
    level: number;
}>;
export default _default;
