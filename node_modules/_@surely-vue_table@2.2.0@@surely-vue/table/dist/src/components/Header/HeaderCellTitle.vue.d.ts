import type { FinallyColumnType } from '../interface';
import type { PropType } from 'vue';
import { isVNode } from 'vue';
declare const _default: import("vue").DefineComponent<{
    column: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>>;
        default: () => FinallyColumnType<import("../interface").DefaultRecordType>;
    };
    prefixCls: StringConstructor;
    wrapText: BooleanConstructor;
}, {
    tableSlotsContext: {
        [key: string]: (...args: any[]) => any;
        emptyText?: () => any;
        expandIcon?: (...args: any[]) => any;
        title?: () => any;
        footer?: () => any;
        summary?: (...args: any[]) => any;
        bodyCell?: (args: import("../interface").CellRenderArgs) => any;
        headerCell?: (opt: {
            title: any;
            column: import("../interface").ColumnType<import("../interface").DefaultRecordType>;
        }) => any;
        customFilterIcon?: (...args: any[]) => any;
        customFilterDropdown?: (...args: any[]) => any;
        tooltipTitle?: (args: import("../interface").CellRenderArgs) => any;
        rowDragGhost?: (arg: import("../interface").RowDragGhostArg<import("../interface").DefaultRecordType, import("../interface").ColumnType<import("../interface").DefaultRecordType>>) => any;
        columnDragGhost?: (arg: import("../interface").ColumnDragGhostArg<import("../interface").ColumnType<import("../interface").DefaultRecordType>>) => any;
    };
    isVNode: typeof isVNode;
    title: import("vue").ComputedRef<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>>;
    altTitle: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    column: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>>;
        default: () => FinallyColumnType<import("../interface").DefaultRecordType>;
    };
    prefixCls: StringConstructor;
    wrapText: BooleanConstructor;
}>>, {
    column: FinallyColumnType<import("../interface").DefaultRecordType>;
    wrapText: boolean;
}>;
export default _default;
