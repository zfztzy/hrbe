import type { PropType } from 'vue';
import type { SummaryCellConfig } from '../context/SummaryContext';
import type { AlignType } from '../interface';
export interface SummaryCellProps {
    index: number;
    colSpan?: number;
    align?: AlignType;
}
declare const _default: import("vue").DefineComponent<{
    index: {
        type: PropType<number>;
    };
    colSpan: {
        type: PropType<number>;
        default: number;
    };
    align: {
        type: PropType<AlignType>;
    };
    columnKey: StringConstructor;
}, {
    prefixCls: import("vue").ComputedRef<string>;
    column: import("vue").ComputedRef<import("../interface").FinallyColumnType<import("../interface").DefaultRecordType>>;
    summaryCtx: import("../context/SummaryContext").SummaryCtxType;
    pageData: import("vue").ComputedRef<any[]>;
    total: import("vue").ComputedRef<number>;
    cellClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    cellConfig: import("vue").ComputedRef<SummaryCellConfig>;
    cellStyle: import("vue").ComputedRef<{
        width: string;
        minWidth: string;
        maxWidth: string;
        order: number;
    }>;
    cellInnerClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    index: {
        type: PropType<number>;
    };
    colSpan: {
        type: PropType<number>;
        default: number;
    };
    align: {
        type: PropType<AlignType>;
    };
    columnKey: StringConstructor;
}>>, {
    colSpan: number;
}>;
export default _default;
