import type { CSSProperties, PropType } from 'vue';
import type { RowClassName, RowType } from '../interface';
import ResizeObserver from 'resize-observer-polyfill';
declare const _default: import("vue").DefineComponent<{
    prefixCls: StringConstructor;
    isExpandRow: BooleanConstructor;
    record: {
        type: ObjectConstructor;
    };
    type: {
        type: PropType<RowType>;
    };
    rowKey: {
        type: (StringConstructor | NumberConstructor)[];
    };
    pos: NumberConstructor;
    rowIndex: NumberConstructor;
    indent: NumberConstructor;
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    getRowClassName: {
        type: PropType<RowClassName<any>>;
    };
}, {
    rowClass: import("vue").ComputedRef<string>;
    rowStyle: import("vue").ComputedRef<CSSProperties>;
    cellClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    tableContext: import("../context/TableContext").TableContextProps;
    mergedRowHeights: import("vue").ComputedRef<Record<import("../interface").Key, number>>;
    handleCellBlur: () => void;
    handleCellHover: (rowKey: import("../interface").Key, columnKey: import("../interface").Key) => void;
    handleClick: () => void;
    rowSelectionType: import("vue").ComputedRef<any>;
    nestExpandable: import("vue").ComputedRef<boolean>;
    hasNestChildren: import("vue").ComputedRef<boolean>;
    mergedExpandable: import("vue").ComputedRef<boolean>;
    expandIconColumnIndex: import("vue").ComputedRef<number>;
    indentSize: import("vue").ComputedRef<number>;
    expanded: import("vue").ComputedRef<boolean>;
    onInternalTriggerExpand: (record: any, event: any) => void;
    customRowProps: import("vue").ComputedRef<Omit<import("vue").HTMLAttributes, "style"> & {
        style?: CSSProperties;
    }>;
    expandColumnKey: string;
    expandRowClass: import("vue").ComputedRef<string>;
    columns: import("vue").Ref<import("../interface").FinallyColumnType<import("../interface").DefaultRecordType>[]>;
    height: import("vue").ComputedRef<number>;
    cellHeight: import("vue").ComputedRef<number>;
    columnStartIndex: import("vue").Ref<number>;
    resizeObserver: ResizeObserver;
    calMaxHeight: () => void;
    bodyRow: import("vue").Ref<HTMLElement>;
    tooltipVisible: import("vue").Ref<boolean>;
    hoverRowKey: import("vue").Ref<import("../interface").Key>;
    hoverColumnKey: import("vue").Ref<import("../interface").Key>;
    xVirtual: import("vue").ComputedRef<boolean>;
    getPopupContainer: () => HTMLDivElement;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: StringConstructor;
    isExpandRow: BooleanConstructor;
    record: {
        type: ObjectConstructor;
    };
    type: {
        type: PropType<RowType>;
    };
    rowKey: {
        type: (StringConstructor | NumberConstructor)[];
    };
    pos: NumberConstructor;
    rowIndex: NumberConstructor;
    indent: NumberConstructor;
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    getRowClassName: {
        type: PropType<RowClassName<any>>;
    };
}>>, {
    wrapText: boolean;
    isExpandRow: boolean;
}>;
export default _default;
