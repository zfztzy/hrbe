import type { ColumnsType, GetRowKey, Key, SurelyTableProps, TableLocale, Position, TriggerEventHandler, ExpandType, TableRowSelection, GetPopupContainer, DragRowEventInfo, DragColumnEventInfo } from '../interface';
import type { CalType } from '../../hooks/useCal';
import type { FilterState } from '../../hooks/useFilter';
import type { SelectionsRes } from '../../hooks/useRowSelection';
import type { SortState } from '../../hooks/useSorter';
import type { InjectionKey, Ref, ComputedRef, ShallowRef } from 'vue';
import type { UseColumnsType } from '../../hooks/useColumns';
import type { FlattenRecordsType } from '../../hooks/useFlattenRecords';
import type { FlattenAllRecordsType } from '../../hooks/useKVMap';
import type { UseCellPropsRes } from '../../hooks/useCellProps';
export interface TableContextProps extends CalType, UseColumnsType, FlattenRecordsType, FlattenAllRecordsType, UseCellPropsRes {
    rawColumns: Ref<ColumnsType>;
    bodyHeight: Ref<number>;
    scrollTop: Ref<number>;
    scrollLeft: Ref<number>;
    domScrollTop: Ref<number>;
    domScrollLeft: Ref<number>;
    rowPosition: Ref<number[]>;
    dataRowPosition: Ref<number[]>;
    startIndex: Ref<number>;
    data: Ref<any[]>;
    rawData: ShallowRef<any[]>;
    pageData: Ref<any[]>;
    props: SurelyTableProps;
    bodyWidth: Ref<number>;
    layerWidth: Ref<number>;
    scrollBarSize: Ref<number>;
    scrollTo: (pos: Position, behavior?: 'auto' | 'smooth', skipAnimate?: boolean) => void;
    leftWidth: Ref<number>;
    centerWidth: Ref<number>;
    rightWidth: Ref<number>;
    showVerticalScrollbar: ComputedRef<boolean>;
    showHorizontalScrollbar: ComputedRef<boolean>;
    getRowKey: ComputedRef<GetRowKey<any>>;
    selection: SelectionsRes;
    locale: ComputedRef<TableLocale>;
    sorterStates: Ref<SortState<any>[]>;
    changeSorter: (sortState: SortState<any>) => void;
    changeFilter: (filterState: FilterState<any>) => void;
    filterStates: Ref<FilterState<any>[]>;
    updateSelectedRowKeys: (keys: Key[]) => void;
    baseHeight: Ref<number>;
    expandedRowKeys: Ref<Set<Key>>;
    indentSize: Ref<number>;
    onTriggerExpand: TriggerEventHandler<any>;
    childrenColumnName: Ref<string>;
    expandType: Ref<ExpandType>;
    supportSticky: boolean;
    mergedRowSelection: Ref<TableRowSelection>;
    getPopupContainer: Ref<GetPopupContainer>;
    virtual: Ref<boolean>;
    xVirtual: Ref<boolean>;
    onResizeColumn: SurelyTableProps['onResizeColumn'];
    onRowDragEnd: (opt: DragRowEventInfo) => void;
    status: Ref<{
        code: number;
    }>;
    watermarkMsg: Ref<string>;
    useAnimate: Ref<boolean>;
    dragRowsHandle: Map<Key, Set<HTMLSpanElement>>;
    draggingRowKey: Ref<Key>;
    insertToRowKey: Ref<Key>;
    dragColumnsHandle: Map<Key, Set<HTMLDivElement>>;
    draggingColumnKey: Ref<Key>;
    onColumnDragEnd: (arg: DragColumnEventInfo) => void;
    onColumnDrag: (arg: DragColumnEventInfo) => void;
    prefixCls: ComputedRef<string>;
    columnDrag: ComputedRef<boolean>;
}
export declare const TableContextKey: InjectionKey<TableContextProps>;
export declare const useProvideTable: (props: TableContextProps) => void;
export declare const useInjectTable: () => TableContextProps;
