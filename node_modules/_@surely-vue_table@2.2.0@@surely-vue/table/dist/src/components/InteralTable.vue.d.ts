import type { GetRowKey, Key, SorterResult, TableLocale, ColumnType, ResizeActionType, DragRowEventInfo, DragColumnEventInfo } from './interface';
import type { SortState } from '../hooks/useSorter';
import type { FilterState } from '../hooks/useFilter';
declare const TableActions: ["paginate", "sort", "filter"];
export declare type TableAction = typeof TableActions[number];
export declare type FilterValue = (Key | boolean)[];
export interface ChangeEventInfo<RecordType> {
    pagination: {
        current?: number;
        pageSize?: number;
        total?: number;
    };
    filters: Record<string, FilterValue | null>;
    sorter: SorterResult<RecordType> | SorterResult<RecordType>[];
    filterStates: FilterState<RecordType>[];
    sorterStates: SortState<RecordType>[];
    currentDataSource: RecordType[];
    action: TableAction;
}
declare const _default: import("vue").DefineComponent<{
    prefixCls: {
        type: StringConstructor;
        default: string;
    };
    columnDrag: {
        type: BooleanConstructor;
        default: boolean;
    };
    animateRows: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropdownPrefixCls: {
        type: StringConstructor;
        default: string;
    };
    columns: {
        type: import("vue").PropType<import("./interface").ColumnsType<import("./interface").DefaultRecordType>>;
        default: import("./interface").ColumnsType<import("./interface").DefaultRecordType>;
    };
    dataSource: {
        type: import("vue").PropType<import("./interface").DefaultRecordType[]>;
        default: () => import("./interface").DefaultRecordType[];
    };
    virtual: {
        type: BooleanConstructor;
        default: any;
    };
    rowHeight: {
        type: import("vue").PropType<import("./interface").RowHeight>;
        default: any;
    };
    headerHeight: {
        type: import("vue").PropType<import("./interface").HeaderHeight>;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
    };
    size: {
        type: import("vue").PropType<"default" | "small" | "middle">;
        default: string;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: import("vue").PropType<boolean | Partial<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            spinning: import("vue-types").VueTypeValidableDef<boolean>;
            size: import("vue-types").VueTypeDef<"default" | "small" | "large">;
            wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>>;
        default: boolean | Partial<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            spinning: import("vue-types").VueTypeValidableDef<boolean>;
            size: import("vue-types").VueTypeDef<"default" | "small" | "large">;
            wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>;
    };
    pagination: {
        type: import("vue").PropType<false | import("./PaginationConfig").TablePaginationConfig>;
        default: any;
    };
    direction: {
        type: import("vue").PropType<"rtl">;
        default: any;
    };
    stripe: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowClassName: {
        type: import("vue").PropType<string | import("./interface").RowClassName<import("./interface").DefaultRecordType>>;
        default: any;
    };
    sticky: {
        type: import("vue").PropType<boolean | import("./interface").HeaderSticky>;
        default: boolean;
    };
    selectedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: any;
    };
    expandFixed: {
        type: import("vue").PropType<import("./interface").FixedType>;
        default: any;
    };
    expandColumnWidth: {
        type: NumberConstructor;
        default: any;
    };
    expandedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: Key[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: Key[];
    };
    expandedRowRender: {
        type: import("vue").PropType<import("./interface").ExpandedRowRender<import("./interface").DefaultRecordType>>;
        default: any;
    };
    expandRowByClick: {
        type: BooleanConstructor;
        default: any;
    };
    expandIcon: {
        type: import("vue").PropType<import("./interface").RenderExpandIcon<import("./interface").DefaultRecordType>>;
        default: any;
    };
    defaultExpandAllRows: {
        type: BooleanConstructor;
        default: any;
    };
    indentSize: NumberConstructor;
    expandIconColumnIndex: NumberConstructor;
    childrenColumnName: {
        type: StringConstructor;
        default: any;
    };
    rowExpandable: {
        type: import("vue").PropType<(record: import("./interface").DefaultRecordType) => boolean>;
        default: () => boolean;
    };
    rowSelection: {
        type: import("vue").PropType<import("./interface").TableRowSelection<import("./interface").DefaultRecordType>>;
        default: any;
    };
    rowHoverDelay: {
        type: NumberConstructor;
        default: number;
    };
    rowKey: {
        type: import("vue").PropType<string | GetRowKey<import("./interface").DefaultRecordType>>;
    };
    customRow: {
        type: import("vue").PropType<(data: import("./interface").DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
            style?: import("vue").CSSProperties;
        }>;
        default: () => {};
    };
    customCell: {
        type: import("vue").PropType<(obj: {
            record: import("./interface").DefaultRecordType;
            rowIndex: number;
            column: ColumnType<import("./interface").DefaultRecordType>;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customHeaderCell: {
        type: import("vue").PropType<(column: ColumnType<import("./interface").DefaultRecordType>) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customSummaryCellProps: {
        type: import("vue").PropType<(obj: {
            record: import("./interface").DefaultRecordType;
            rowIndex: number;
            column: ColumnType<import("./interface").DefaultRecordType>;
            columnIndex: number;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSorterTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    getPopupContainer: {
        type: import("vue").PropType<import("./interface").GetPopupContainer>;
    };
    locale: {
        type: import("vue").PropType<TableLocale>;
        default: TableLocale;
    };
    scrollX: {
        type: import("vue").PropType<string | number>;
    };
    scroll: {
        type: import("vue").PropType<{
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        }>;
        default: {
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        };
    };
    rowDrag: {
        type: BooleanConstructor[];
    };
    onChange: {
        type: import("vue").PropType<(pagination: import("./PaginationConfig").TablePaginationConfig, filters: Record<string, import("./interface").FilterValue>, sorter: SorterResult<import("./interface").DefaultRecordType> | SorterResult<import("./interface").DefaultRecordType>[], extra: import("./interface").TableCurrentDataSource<import("./interface").DefaultRecordType>) => void>;
    };
    summaryFixed: {
        type: BooleanConstructor;
    };
    'onUpdate:selectedRowKeys': {
        type: import("vue").PropType<(selectedRowKeys: Key[], selectedRows: import("./interface").DefaultRecordType[]) => void>;
    };
    onScroll: {
        type: import("vue").PropType<(e: UIEvent) => void>;
    };
    'onUpdate:expandedRowKeys': {
        type: import("vue").PropType<(info: Key[]) => void>;
    };
    onResizeColumn: {
        type: import("vue").PropType<(w: number, col: ColumnType<import("./interface").DefaultRecordType>, action: ResizeActionType) => boolean | void>;
        default: any;
    };
    onRowDragEnd: {
        type: import("vue").PropType<(opt: DragRowEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    onColumnDragEnd: {
        type: import("vue").PropType<(opt: DragColumnEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    'onUpdate:pagination': {
        type: import("vue").PropType<(info: import("./PaginationConfig").TablePaginationConfig) => void>;
    };
}, {
    bodyRef: any;
    spinProps: import("vue").ComputedRef<{
        prefixCls?: string;
        wrapperClassName?: string;
        delay?: number;
        spinning: boolean;
        size?: "default" | "small" | "large";
        tip?: any;
        indicator?: any;
    }>;
    rowPosition: import("vue").Ref<number[]>;
    viewportHeight: import("vue").Ref<number>;
    startIndex: import("vue").Ref<number>;
    data: import("vue").Ref<any[]>;
    watermarkMsg: import("vue").Ref<string>;
    rootStyle: import("vue").ComputedRef<{
        height: string;
        maxHeight: string;
    }>;
    rootClass: import("vue").ComputedRef<string>;
    wrapperClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    watermarkStyle: import("vue").ComputedRef<any>;
    mergedPagination: import("vue").ComputedRef<import("./PaginationConfig").TablePaginationConfig>;
    pos: import("vue").ComputedRef<{
        bottom?: "left" | "right";
        top?: "left" | "right";
    }>;
    onPaginationChange: (page: number, pageSize?: number) => void;
    scrollBarSize: import("vue").ShallowRef<number>;
    scrollTop: import("vue").Ref<number>;
    layerWidth: import("vue").Ref<number>;
    bodyWidth: import("vue").Ref<number>;
    scrollLeft: import("vue").Ref<number>;
    handleBodyScroll: (e: UIEvent) => void;
    handleScrollLeft: (e: UIEvent, left: number) => void;
    cal: import("../hooks/useCal").CalType;
    selection: import("../hooks/useRowSelection").SelectionsRes;
    locale: import("vue").ComputedRef<TableLocale>;
    paginationProps: import("vue").ComputedRef<import("lodash").Omit<import("./PaginationConfig").TablePaginationConfig, "position">>;
    slots: Readonly<{
        [name: string]: import("vue").Slot;
    }>;
    mergedScrollX: import("vue").ComputedRef<string | number>;
    mergedScrollY: import("vue").ComputedRef<string | number>;
    bodyHeight: import("vue").Ref<number>;
    measureWidthRef: import("vue").ShallowRef<any>;
    flattenData: import("vue").Ref<import("./interface").FlatRecord<any>[]>;
    rootRef: import("vue").Ref<HTMLElement>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:pagination" | "scroll" | "update:selectedRowKeys" | "update:expandedRowKeys" | "update:columns" | "update:sorter" | "update:filters" | "expand" | "expandedRowsChange" | "resizeColumn")[], "update:pagination" | "scroll" | "update:selectedRowKeys" | "update:expandedRowKeys" | "update:columns" | "update:sorter" | "update:filters" | "expand" | "expandedRowsChange" | "resizeColumn", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: {
        type: StringConstructor;
        default: string;
    };
    columnDrag: {
        type: BooleanConstructor;
        default: boolean;
    };
    animateRows: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropdownPrefixCls: {
        type: StringConstructor;
        default: string;
    };
    columns: {
        type: import("vue").PropType<import("./interface").ColumnsType<import("./interface").DefaultRecordType>>;
        default: import("./interface").ColumnsType<import("./interface").DefaultRecordType>;
    };
    dataSource: {
        type: import("vue").PropType<import("./interface").DefaultRecordType[]>;
        default: () => import("./interface").DefaultRecordType[];
    };
    virtual: {
        type: BooleanConstructor;
        default: any;
    };
    rowHeight: {
        type: import("vue").PropType<import("./interface").RowHeight>;
        default: any;
    };
    headerHeight: {
        type: import("vue").PropType<import("./interface").HeaderHeight>;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
    };
    size: {
        type: import("vue").PropType<"default" | "small" | "middle">;
        default: string;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: import("vue").PropType<boolean | Partial<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            spinning: import("vue-types").VueTypeValidableDef<boolean>;
            size: import("vue-types").VueTypeDef<"default" | "small" | "large">;
            wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>>;
        default: boolean | Partial<import("vue").ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            spinning: import("vue-types").VueTypeValidableDef<boolean>;
            size: import("vue-types").VueTypeDef<"default" | "small" | "large">;
            wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>;
    };
    pagination: {
        type: import("vue").PropType<false | import("./PaginationConfig").TablePaginationConfig>;
        default: any;
    };
    direction: {
        type: import("vue").PropType<"rtl">;
        default: any;
    };
    stripe: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowClassName: {
        type: import("vue").PropType<string | import("./interface").RowClassName<import("./interface").DefaultRecordType>>;
        default: any;
    };
    sticky: {
        type: import("vue").PropType<boolean | import("./interface").HeaderSticky>;
        default: boolean;
    };
    selectedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: any;
    };
    expandFixed: {
        type: import("vue").PropType<import("./interface").FixedType>;
        default: any;
    };
    expandColumnWidth: {
        type: NumberConstructor;
        default: any;
    };
    expandedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: Key[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: Key[];
    };
    expandedRowRender: {
        type: import("vue").PropType<import("./interface").ExpandedRowRender<import("./interface").DefaultRecordType>>;
        default: any;
    };
    expandRowByClick: {
        type: BooleanConstructor;
        default: any;
    };
    expandIcon: {
        type: import("vue").PropType<import("./interface").RenderExpandIcon<import("./interface").DefaultRecordType>>;
        default: any;
    };
    defaultExpandAllRows: {
        type: BooleanConstructor;
        default: any;
    };
    indentSize: NumberConstructor;
    expandIconColumnIndex: NumberConstructor;
    childrenColumnName: {
        type: StringConstructor;
        default: any;
    };
    rowExpandable: {
        type: import("vue").PropType<(record: import("./interface").DefaultRecordType) => boolean>;
        default: () => boolean;
    };
    rowSelection: {
        type: import("vue").PropType<import("./interface").TableRowSelection<import("./interface").DefaultRecordType>>;
        default: any;
    };
    rowHoverDelay: {
        type: NumberConstructor;
        default: number;
    };
    rowKey: {
        type: import("vue").PropType<string | GetRowKey<import("./interface").DefaultRecordType>>;
    };
    customRow: {
        type: import("vue").PropType<(data: import("./interface").DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
            style?: import("vue").CSSProperties;
        }>;
        default: () => {};
    };
    customCell: {
        type: import("vue").PropType<(obj: {
            record: import("./interface").DefaultRecordType;
            rowIndex: number;
            column: ColumnType<import("./interface").DefaultRecordType>;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customHeaderCell: {
        type: import("vue").PropType<(column: ColumnType<import("./interface").DefaultRecordType>) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customSummaryCellProps: {
        type: import("vue").PropType<(obj: {
            record: import("./interface").DefaultRecordType;
            rowIndex: number;
            column: ColumnType<import("./interface").DefaultRecordType>;
            columnIndex: number;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSorterTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    getPopupContainer: {
        type: import("vue").PropType<import("./interface").GetPopupContainer>;
    };
    locale: {
        type: import("vue").PropType<TableLocale>;
        default: TableLocale;
    };
    scrollX: {
        type: import("vue").PropType<string | number>;
    };
    scroll: {
        type: import("vue").PropType<{
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        }>;
        default: {
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        };
    };
    rowDrag: {
        type: BooleanConstructor[];
    };
    onChange: {
        type: import("vue").PropType<(pagination: import("./PaginationConfig").TablePaginationConfig, filters: Record<string, import("./interface").FilterValue>, sorter: SorterResult<import("./interface").DefaultRecordType> | SorterResult<import("./interface").DefaultRecordType>[], extra: import("./interface").TableCurrentDataSource<import("./interface").DefaultRecordType>) => void>;
    };
    summaryFixed: {
        type: BooleanConstructor;
    };
    'onUpdate:selectedRowKeys': {
        type: import("vue").PropType<(selectedRowKeys: Key[], selectedRows: import("./interface").DefaultRecordType[]) => void>;
    };
    onScroll: {
        type: import("vue").PropType<(e: UIEvent) => void>;
    };
    'onUpdate:expandedRowKeys': {
        type: import("vue").PropType<(info: Key[]) => void>;
    };
    onResizeColumn: {
        type: import("vue").PropType<(w: number, col: ColumnType<import("./interface").DefaultRecordType>, action: ResizeActionType) => boolean | void>;
        default: any;
    };
    onRowDragEnd: {
        type: import("vue").PropType<(opt: DragRowEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    onColumnDragEnd: {
        type: import("vue").PropType<(opt: DragColumnEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    'onUpdate:pagination': {
        type: import("vue").PropType<(info: import("./PaginationConfig").TablePaginationConfig) => void>;
    };
}>> & {
    "onUpdate:pagination"?: (...args: any[]) => any;
    onScroll?: (...args: any[]) => any;
    "onUpdate:selectedRowKeys"?: (...args: any[]) => any;
    "onUpdate:expandedRowKeys"?: (...args: any[]) => any;
    "onUpdate:columns"?: (...args: any[]) => any;
    "onUpdate:sorter"?: (...args: any[]) => any;
    "onUpdate:filters"?: (...args: any[]) => any;
    onExpand?: (...args: any[]) => any;
    onExpandedRowsChange?: (...args: any[]) => any;
    onResizeColumn?: (...args: any[]) => any;
}, {
    prefixCls: string;
    size: "default" | "small" | "middle";
    locale: TableLocale;
    scroll: {
        x?: string | number;
        y?: string | number;
        scrollToFirstRowOnChange?: boolean;
    };
    onResizeColumn: (w: number, col: ColumnType<import("./interface").DefaultRecordType>, action: ResizeActionType) => boolean | void;
    columnDrag: boolean;
    animateRows: boolean;
    dropdownPrefixCls: string;
    columns: import("./interface").ColumnsType<import("./interface").DefaultRecordType>;
    dataSource: import("./interface").DefaultRecordType[];
    virtual: boolean;
    rowHeight: import("./interface").RowHeight;
    bordered: boolean;
    wrapText: boolean;
    loading: boolean | Partial<import("vue").ExtractPropTypes<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        spinning: import("vue-types").VueTypeValidableDef<boolean>;
        size: import("vue-types").VueTypeDef<"default" | "small" | "large">;
        wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        tip: import("vue-types").VueTypeValidableDef<any>;
        delay: import("vue-types").VueTypeValidableDef<number> & {
            default: number;
        };
        indicator: import("vue-types").VueTypeValidableDef<any>;
    }>>;
    pagination: any;
    direction: "rtl";
    stripe: boolean;
    rowClassName: string | import("./interface").RowClassName<import("./interface").DefaultRecordType>;
    sticky: boolean;
    selectedRowKeys: Key[];
    expandFixed: import("./interface").FixedType;
    expandColumnWidth: number;
    expandedRowKeys: Key[];
    defaultExpandedRowKeys: Key[];
    expandedRowRender: import("./interface").ExpandedRowRender<import("./interface").DefaultRecordType>;
    expandRowByClick: boolean;
    expandIcon: import("./interface").RenderExpandIcon<import("./interface").DefaultRecordType>;
    defaultExpandAllRows: boolean;
    childrenColumnName: string;
    rowExpandable: (record: import("./interface").DefaultRecordType) => boolean;
    rowSelection: any;
    rowHoverDelay: number;
    customRow: (data: import("./interface").DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
        style?: import("vue").CSSProperties;
    };
    customCell: (obj: {
        record: import("./interface").DefaultRecordType;
        rowIndex: number;
        column: ColumnType<import("./interface").DefaultRecordType>;
    }) => Record<string, any>;
    customHeaderCell: (column: ColumnType<import("./interface").DefaultRecordType>) => Record<string, any>;
    customSummaryCellProps: (obj: {
        record: import("./interface").DefaultRecordType;
        rowIndex: number;
        column: ColumnType<import("./interface").DefaultRecordType>;
        columnIndex: number;
    }) => Record<string, any>;
    showHeader: boolean;
    showSorterTooltip: boolean;
    summaryFixed: boolean;
    onRowDragEnd: (opt: DragRowEventInfo) => boolean | void | Promise<any>;
    onColumnDragEnd: (opt: DragColumnEventInfo) => boolean | void | Promise<any>;
}>;
export default _default;
