import type { PropType } from 'vue';
import type { ColumnFilterItem, Key, TableLocale } from '../interface';
declare const _default: import("vue").DefineComponent<{
    filters: PropType<ColumnFilterItem[]>;
    prefixCls: StringConstructor;
    dropdownPrefixCls: StringConstructor;
    filteredKeys: PropType<Key[]>;
    filterMultiple: BooleanConstructor;
    locale: {
        type: PropType<TableLocale>;
        default: TableLocale;
    };
    root: BooleanConstructor;
    getPopupContainer: FunctionConstructor;
    onSelectKeys: FunctionConstructor;
    onOpenChange: FunctionConstructor;
    onMenuClick: FunctionConstructor;
    openKeys: ArrayConstructor;
}, {
    emptyImage: any;
    menuProps: import("vue").ComputedRef<{
        multiple: boolean;
        prefixCls: string;
        getPopupContainer: Function;
        onSelect: Function;
        onDeselect: Function;
        selectedKeys: Key[];
        onOpenChange: Function;
        onClick: Function;
        openKeys: unknown[];
    } | {
        multiple?: undefined;
        prefixCls?: undefined;
        getPopupContainer?: undefined;
        onSelect?: undefined;
        onDeselect?: undefined;
        selectedKeys?: undefined;
        onOpenChange?: undefined;
        onClick?: undefined;
        openKeys?: undefined;
    }>;
    rootPrefixCls: import("vue").ComputedRef<string>;
    props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
        filters: PropType<ColumnFilterItem[]>;
        prefixCls: StringConstructor;
        dropdownPrefixCls: StringConstructor;
        filteredKeys: PropType<Key[]>;
        filterMultiple: BooleanConstructor;
        locale: {
            type: PropType<TableLocale>;
            default: TableLocale;
        };
        root: BooleanConstructor;
        getPopupContainer: FunctionConstructor;
        onSelectKeys: FunctionConstructor;
        onOpenChange: FunctionConstructor;
        onMenuClick: FunctionConstructor;
        openKeys: ArrayConstructor;
    }>> & {}>>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    filters: PropType<ColumnFilterItem[]>;
    prefixCls: StringConstructor;
    dropdownPrefixCls: StringConstructor;
    filteredKeys: PropType<Key[]>;
    filterMultiple: BooleanConstructor;
    locale: {
        type: PropType<TableLocale>;
        default: TableLocale;
    };
    root: BooleanConstructor;
    getPopupContainer: FunctionConstructor;
    onSelectKeys: FunctionConstructor;
    onOpenChange: FunctionConstructor;
    onMenuClick: FunctionConstructor;
    openKeys: ArrayConstructor;
}>>, {
    filterMultiple: boolean;
    locale: TableLocale;
    root: boolean;
}>;
export default _default;
