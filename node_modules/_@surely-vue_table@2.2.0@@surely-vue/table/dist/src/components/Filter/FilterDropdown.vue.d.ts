import type { PropType } from 'vue';
import type { FinallyColumnType, FilterConfirmProps, Key } from '../interface';
declare const _default: import("vue").DefineComponent<{
    prefixCls: {
        type: StringConstructor;
        default: string;
    };
    column: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>>;
        required: true;
    };
}, {
    rootClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    getPopupContainer: import("vue").ComputedRef<import("../interface").GetPopupContainer>;
    triggerVisible: (newVisible: boolean) => void;
    mergedVisible: import("vue").ComputedRef<boolean>;
    onReset: () => void;
    onConfirm: () => void;
    onVisibleChange: (newVisible: boolean) => void;
    doFilter: (param?: FilterConfirmProps) => void;
    filterItemsProps: import("vue").ComputedRef<{
        filters: import("../interface").ColumnFilterItem[];
        prefixCls: string;
        filteredKeys: Key[];
        filterMultiple: boolean;
        locale: import("../interface").TableLocale;
        onSelectKeys: ({ selectedKeys }: {
            selectedKeys?: Key[];
        }) => void;
        onOpenChange: (keys: string[]) => void;
        onMenuClick: () => void;
        openKeys: string[];
    }>;
    onSelectKeys: ({ selectedKeys }: {
        selectedKeys?: Key[];
    }) => void;
    filteredKeys: import("vue").Ref<Key[]>;
    dropdownPrefixCls: import("vue").ComputedRef<string>;
    filtered: import("vue").ComputedRef<boolean>;
    locale: import("vue").ComputedRef<import("../interface").TableLocale>;
    customFilterDropdown: import("vue").ComputedRef<(...args: any[]) => any>;
    customFilterIcon: import("vue").ComputedRef<(...args: any[]) => any>;
    custocustomFilterDropdownProps: import("vue").ComputedRef<{
        prefixCls: string;
        setSelectedKeys: (selectedKeys: any) => void;
        selectedKeys: Key[];
        confirm: (param?: FilterConfirmProps) => void;
        clearFilters: () => void;
        filters: import("../interface").ColumnFilterItem[];
        column: import("../interface").ColumnType<import("../interface").DefaultRecordType> | import("../interface").ColumnGroupType<import("../interface").DefaultRecordType>;
        visible: boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    prefixCls: {
        type: StringConstructor;
        default: string;
    };
    column: {
        type: PropType<FinallyColumnType<import("../interface").DefaultRecordType>>;
        required: true;
    };
}>>, {
    prefixCls: string;
}>;
export default _default;
