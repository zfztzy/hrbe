import type { ExtractPropTypes } from 'vue';
import type { Key, SorterResult, TableExposeType } from './interface';
declare const TableActions: ["paginate", "sort", "filter"];
export declare type TableAction = typeof TableActions[number];
export declare type FilterValue = (Key | boolean)[];
export interface ChangeEventInfo<RecordType> {
    pagination: {
        current?: number;
        pageSize?: number;
        total?: number;
    };
    filters: Record<string, FilterValue | null>;
    sorter: SorterResult<RecordType> | SorterResult<RecordType>[];
    currentDataSource: RecordType[];
    action: TableAction;
}
declare const props: {
    prefixCls: {
        type: StringConstructor;
        default: string;
    };
    columnDrag: {
        type: BooleanConstructor;
        default: boolean;
    };
    animateRows: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropdownPrefixCls: {
        type: StringConstructor;
        default: string;
    };
    columns: {
        type: import("vue").PropType<import("./interface").ColumnsType<import("./interface").DefaultRecordType>>;
        default: import("./interface").ColumnsType<import("./interface").DefaultRecordType>;
    };
    dataSource: {
        type: import("vue").PropType<import("./interface").DefaultRecordType[]>;
        default: () => import("./interface").DefaultRecordType[];
    };
    virtual: {
        type: BooleanConstructor;
        default: any;
    };
    rowHeight: {
        type: import("vue").PropType<import("./interface").RowHeight>;
        default: any;
    };
    headerHeight: {
        type: import("vue").PropType<import("./interface").HeaderHeight>;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
    };
    size: {
        type: import("vue").PropType<"middle" | "small" | "default">;
        default: string;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: import("vue").PropType<boolean | Partial<ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            spinning: import("vue-types").VueTypeValidableDef<boolean>;
            size: import("vue-types").VueTypeDef<"small" | "default" | "large">;
            wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>>;
        default: boolean | Partial<ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            spinning: import("vue-types").VueTypeValidableDef<boolean>;
            size: import("vue-types").VueTypeDef<"small" | "default" | "large">;
            wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>;
    };
    pagination: {
        type: import("vue").PropType<false | import("./PaginationConfig").TablePaginationConfig>;
        default: any;
    };
    direction: {
        type: import("vue").PropType<"rtl">;
        default: any;
    };
    stripe: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowClassName: {
        type: import("vue").PropType<string | import("./interface").RowClassName<import("./interface").DefaultRecordType>>;
        default: any;
    };
    sticky: {
        type: import("vue").PropType<boolean | import("./interface").HeaderSticky>;
        default: boolean;
    };
    selectedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: any;
    };
    expandFixed: {
        type: import("vue").PropType<import("./interface").FixedType>;
        default: any;
    };
    expandColumnWidth: {
        type: NumberConstructor;
        default: any;
    };
    expandedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: Key[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: Key[];
    };
    expandedRowRender: {
        type: import("vue").PropType<import("./interface").ExpandedRowRender<import("./interface").DefaultRecordType>>;
        default: any;
    };
    expandRowByClick: {
        type: BooleanConstructor;
        default: any;
    };
    expandIcon: {
        type: import("vue").PropType<import("./interface").RenderExpandIcon<import("./interface").DefaultRecordType>>;
        default: any;
    };
    defaultExpandAllRows: {
        type: BooleanConstructor;
        default: any;
    };
    indentSize: NumberConstructor;
    expandIconColumnIndex: NumberConstructor;
    childrenColumnName: {
        type: StringConstructor;
        default: any;
    };
    rowExpandable: {
        type: import("vue").PropType<(record: import("./interface").DefaultRecordType) => boolean>;
        default: () => boolean;
    };
    rowSelection: {
        type: import("vue").PropType<import("./interface").TableRowSelection<import("./interface").DefaultRecordType>>;
        default: any;
    };
    rowHoverDelay: {
        type: NumberConstructor;
        default: number;
    };
    rowKey: {
        type: import("vue").PropType<string | import("./interface").GetRowKey<import("./interface").DefaultRecordType>>;
    };
    customRow: {
        type: import("vue").PropType<(data: import("./interface").DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
            style?: import("vue").CSSProperties;
        }>;
        default: () => {};
    };
    customCell: {
        type: import("vue").PropType<(obj: {
            record: import("./interface").DefaultRecordType;
            rowIndex: number;
            column: import("./interface").ColumnType<import("./interface").DefaultRecordType>;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customHeaderCell: {
        type: import("vue").PropType<(column: import("./interface").ColumnType<import("./interface").DefaultRecordType>) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customSummaryCellProps: {
        type: import("vue").PropType<(obj: {
            record: import("./interface").DefaultRecordType;
            rowIndex: number;
            column: import("./interface").ColumnType<import("./interface").DefaultRecordType>;
            columnIndex: number;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSorterTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    getPopupContainer: {
        type: import("vue").PropType<import("./interface").GetPopupContainer>;
    };
    locale: {
        type: import("vue").PropType<import("./interface").TableLocale>;
        default: import("./interface").TableLocale;
    };
    scrollX: {
        type: import("vue").PropType<string | number>;
    };
    scroll: {
        type: import("vue").PropType<{
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        }>;
        default: {
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        };
    };
    rowDrag: {
        type: BooleanConstructor[];
    };
    onChange: {
        type: import("vue").PropType<(pagination: import("./PaginationConfig").TablePaginationConfig, filters: Record<string, import("./interface").FilterValue>, sorter: SorterResult<import("./interface").DefaultRecordType> | SorterResult<import("./interface").DefaultRecordType>[], extra: import("./interface").TableCurrentDataSource<import("./interface").DefaultRecordType>) => void>;
    };
    summaryFixed: {
        type: BooleanConstructor;
    };
    'onUpdate:selectedRowKeys': {
        type: import("vue").PropType<(selectedRowKeys: Key[], selectedRows: import("./interface").DefaultRecordType[]) => void>;
    };
    onScroll: {
        type: import("vue").PropType<(e: UIEvent) => void>;
    };
    'onUpdate:expandedRowKeys': {
        type: import("vue").PropType<(info: Key[]) => void>;
    };
    onResizeColumn: {
        type: import("vue").PropType<(w: number, col: import("./interface").ColumnType<import("./interface").DefaultRecordType>, action: import("./interface").ResizeActionType) => boolean | void>;
        default: any;
    };
    onRowDragEnd: {
        type: import("vue").PropType<(opt: import("./interface").DragRowEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    onColumnDragEnd: {
        type: import("vue").PropType<(opt: import("./interface").DragColumnEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    'onUpdate:pagination': {
        type: import("vue").PropType<(info: import("./PaginationConfig").TablePaginationConfig) => void>;
    };
};
export declare type TableProps = Partial<ExtractPropTypes<typeof props>>;
declare const _default: import("vue").DefineComponent<Partial<ExtractPropTypes<{
    prefixCls: {
        type: StringConstructor;
        default: string;
    };
    columnDrag: {
        type: BooleanConstructor;
        default: boolean;
    };
    animateRows: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropdownPrefixCls: {
        type: StringConstructor;
        default: string;
    };
    columns: {
        type: import("vue").PropType<import("./interface").ColumnsType<import("./interface").DefaultRecordType>>;
        default: import("./interface").ColumnsType<import("./interface").DefaultRecordType>;
    };
    dataSource: {
        type: import("vue").PropType<import("./interface").DefaultRecordType[]>;
        default: () => import("./interface").DefaultRecordType[];
    };
    virtual: {
        type: BooleanConstructor;
        default: any;
    };
    rowHeight: {
        type: import("vue").PropType<import("./interface").RowHeight>;
        default: any;
    };
    headerHeight: {
        type: import("vue").PropType<import("./interface").HeaderHeight>;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
    };
    size: {
        type: import("vue").PropType<"middle" | "small" | "default">;
        default: string;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: import("vue").PropType<boolean | Partial<ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            spinning: import("vue-types").VueTypeValidableDef<boolean>;
            size: import("vue-types").VueTypeDef<"small" | "default" | "large">;
            wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>>;
        default: boolean | Partial<ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            spinning: import("vue-types").VueTypeValidableDef<boolean>;
            size: import("vue-types").VueTypeDef<"small" | "default" | "large">;
            wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>;
    };
    pagination: {
        type: import("vue").PropType<false | import("./PaginationConfig").TablePaginationConfig>;
        default: any;
    };
    direction: {
        type: import("vue").PropType<"rtl">;
        default: any;
    };
    stripe: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowClassName: {
        type: import("vue").PropType<string | import("./interface").RowClassName<import("./interface").DefaultRecordType>>;
        default: any;
    };
    sticky: {
        type: import("vue").PropType<boolean | import("./interface").HeaderSticky>;
        default: boolean;
    };
    selectedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: any;
    };
    expandFixed: {
        type: import("vue").PropType<import("./interface").FixedType>;
        default: any;
    };
    expandColumnWidth: {
        type: NumberConstructor;
        default: any;
    };
    expandedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: Key[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: Key[];
    };
    expandedRowRender: {
        type: import("vue").PropType<import("./interface").ExpandedRowRender<import("./interface").DefaultRecordType>>;
        default: any;
    };
    expandRowByClick: {
        type: BooleanConstructor;
        default: any;
    };
    expandIcon: {
        type: import("vue").PropType<import("./interface").RenderExpandIcon<import("./interface").DefaultRecordType>>;
        default: any;
    };
    defaultExpandAllRows: {
        type: BooleanConstructor;
        default: any;
    };
    indentSize: NumberConstructor;
    expandIconColumnIndex: NumberConstructor;
    childrenColumnName: {
        type: StringConstructor;
        default: any;
    };
    rowExpandable: {
        type: import("vue").PropType<(record: import("./interface").DefaultRecordType) => boolean>;
        default: () => boolean;
    };
    rowSelection: {
        type: import("vue").PropType<import("./interface").TableRowSelection<import("./interface").DefaultRecordType>>;
        default: any;
    };
    rowHoverDelay: {
        type: NumberConstructor;
        default: number;
    };
    rowKey: {
        type: import("vue").PropType<string | import("./interface").GetRowKey<import("./interface").DefaultRecordType>>;
    };
    customRow: {
        type: import("vue").PropType<(data: import("./interface").DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
            style?: import("vue").CSSProperties;
        }>;
        default: () => {};
    };
    customCell: {
        type: import("vue").PropType<(obj: {
            record: import("./interface").DefaultRecordType;
            rowIndex: number;
            column: import("./interface").ColumnType<import("./interface").DefaultRecordType>;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customHeaderCell: {
        type: import("vue").PropType<(column: import("./interface").ColumnType<import("./interface").DefaultRecordType>) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customSummaryCellProps: {
        type: import("vue").PropType<(obj: {
            record: import("./interface").DefaultRecordType;
            rowIndex: number;
            column: import("./interface").ColumnType<import("./interface").DefaultRecordType>;
            columnIndex: number;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSorterTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    getPopupContainer: {
        type: import("vue").PropType<import("./interface").GetPopupContainer>;
    };
    locale: {
        type: import("vue").PropType<import("./interface").TableLocale>;
        default: import("./interface").TableLocale;
    };
    scrollX: {
        type: import("vue").PropType<string | number>;
    };
    scroll: {
        type: import("vue").PropType<{
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        }>;
        default: {
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        };
    };
    rowDrag: {
        type: BooleanConstructor[];
    };
    onChange: {
        type: import("vue").PropType<(pagination: import("./PaginationConfig").TablePaginationConfig, filters: Record<string, import("./interface").FilterValue>, sorter: SorterResult<import("./interface").DefaultRecordType> | SorterResult<import("./interface").DefaultRecordType>[], extra: import("./interface").TableCurrentDataSource<import("./interface").DefaultRecordType>) => void>;
    };
    summaryFixed: {
        type: BooleanConstructor;
    };
    'onUpdate:selectedRowKeys': {
        type: import("vue").PropType<(selectedRowKeys: Key[], selectedRows: import("./interface").DefaultRecordType[]) => void>;
    };
    onScroll: {
        type: import("vue").PropType<(e: UIEvent) => void>;
    };
    'onUpdate:expandedRowKeys': {
        type: import("vue").PropType<(info: Key[]) => void>;
    };
    onResizeColumn: {
        type: import("vue").PropType<(w: number, col: import("./interface").ColumnType<import("./interface").DefaultRecordType>, action: import("./interface").ResizeActionType) => boolean | void>;
        default: any;
    };
    onRowDragEnd: {
        type: import("vue").PropType<(opt: import("./interface").DragRowEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    onColumnDragEnd: {
        type: import("vue").PropType<(opt: import("./interface").DragColumnEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    'onUpdate:pagination': {
        type: import("vue").PropType<(info: import("./PaginationConfig").TablePaginationConfig) => void>;
    };
}>>, Omit<TableExposeType, "scrollTo">, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<Partial<ExtractPropTypes<{
    prefixCls: {
        type: StringConstructor;
        default: string;
    };
    columnDrag: {
        type: BooleanConstructor;
        default: boolean;
    };
    animateRows: {
        type: BooleanConstructor;
        default: boolean;
    };
    dropdownPrefixCls: {
        type: StringConstructor;
        default: string;
    };
    columns: {
        type: import("vue").PropType<import("./interface").ColumnsType<import("./interface").DefaultRecordType>>;
        default: import("./interface").ColumnsType<import("./interface").DefaultRecordType>;
    };
    dataSource: {
        type: import("vue").PropType<import("./interface").DefaultRecordType[]>;
        default: () => import("./interface").DefaultRecordType[];
    };
    virtual: {
        type: BooleanConstructor;
        default: any;
    };
    rowHeight: {
        type: import("vue").PropType<import("./interface").RowHeight>;
        default: any;
    };
    headerHeight: {
        type: import("vue").PropType<import("./interface").HeaderHeight>;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
    };
    size: {
        type: import("vue").PropType<"middle" | "small" | "default">;
        default: string;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapText: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: import("vue").PropType<boolean | Partial<ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            spinning: import("vue-types").VueTypeValidableDef<boolean>;
            size: import("vue-types").VueTypeDef<"small" | "default" | "large">;
            wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>>;
        default: boolean | Partial<ExtractPropTypes<{
            prefixCls: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            spinning: import("vue-types").VueTypeValidableDef<boolean>;
            size: import("vue-types").VueTypeDef<"small" | "default" | "large">;
            wrapperClassName: import("vue-types").VueTypeValidableDef<string> & {
                default: string;
            };
            tip: import("vue-types").VueTypeValidableDef<any>;
            delay: import("vue-types").VueTypeValidableDef<number> & {
                default: number;
            };
            indicator: import("vue-types").VueTypeValidableDef<any>;
        }>>;
    };
    pagination: {
        type: import("vue").PropType<false | import("./PaginationConfig").TablePaginationConfig>;
        default: any;
    };
    direction: {
        type: import("vue").PropType<"rtl">;
        default: any;
    };
    stripe: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowClassName: {
        type: import("vue").PropType<string | import("./interface").RowClassName<import("./interface").DefaultRecordType>>;
        default: any;
    };
    sticky: {
        type: import("vue").PropType<boolean | import("./interface").HeaderSticky>;
        default: boolean;
    };
    selectedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: any;
    };
    expandFixed: {
        type: import("vue").PropType<import("./interface").FixedType>;
        default: any;
    };
    expandColumnWidth: {
        type: NumberConstructor;
        default: any;
    };
    expandedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: Key[];
    };
    defaultExpandedRowKeys: {
        type: import("vue").PropType<Key[]>;
        default: Key[];
    };
    expandedRowRender: {
        type: import("vue").PropType<import("./interface").ExpandedRowRender<import("./interface").DefaultRecordType>>;
        default: any;
    };
    expandRowByClick: {
        type: BooleanConstructor;
        default: any;
    };
    expandIcon: {
        type: import("vue").PropType<import("./interface").RenderExpandIcon<import("./interface").DefaultRecordType>>;
        default: any;
    };
    defaultExpandAllRows: {
        type: BooleanConstructor;
        default: any;
    };
    indentSize: NumberConstructor;
    expandIconColumnIndex: NumberConstructor;
    childrenColumnName: {
        type: StringConstructor;
        default: any;
    };
    rowExpandable: {
        type: import("vue").PropType<(record: import("./interface").DefaultRecordType) => boolean>;
        default: () => boolean;
    };
    rowSelection: {
        type: import("vue").PropType<import("./interface").TableRowSelection<import("./interface").DefaultRecordType>>;
        default: any;
    };
    rowHoverDelay: {
        type: NumberConstructor;
        default: number;
    };
    rowKey: {
        type: import("vue").PropType<string | import("./interface").GetRowKey<import("./interface").DefaultRecordType>>;
    };
    customRow: {
        type: import("vue").PropType<(data: import("./interface").DefaultRecordType, index?: number) => Omit<import("vue").HTMLAttributes, "style"> & {
            style?: import("vue").CSSProperties;
        }>;
        default: () => {};
    };
    customCell: {
        type: import("vue").PropType<(obj: {
            record: import("./interface").DefaultRecordType;
            rowIndex: number;
            column: import("./interface").ColumnType<import("./interface").DefaultRecordType>;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customHeaderCell: {
        type: import("vue").PropType<(column: import("./interface").ColumnType<import("./interface").DefaultRecordType>) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    customSummaryCellProps: {
        type: import("vue").PropType<(obj: {
            record: import("./interface").DefaultRecordType;
            rowIndex: number;
            column: import("./interface").ColumnType<import("./interface").DefaultRecordType>;
            columnIndex: number;
        }) => Record<string, any>>;
        default: () => Record<string, any>;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSorterTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    getPopupContainer: {
        type: import("vue").PropType<import("./interface").GetPopupContainer>;
    };
    locale: {
        type: import("vue").PropType<import("./interface").TableLocale>;
        default: import("./interface").TableLocale;
    };
    scrollX: {
        type: import("vue").PropType<string | number>;
    };
    scroll: {
        type: import("vue").PropType<{
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        }>;
        default: {
            x?: string | number;
            y?: string | number;
            scrollToFirstRowOnChange?: boolean;
        };
    };
    rowDrag: {
        type: BooleanConstructor[];
    };
    onChange: {
        type: import("vue").PropType<(pagination: import("./PaginationConfig").TablePaginationConfig, filters: Record<string, import("./interface").FilterValue>, sorter: SorterResult<import("./interface").DefaultRecordType> | SorterResult<import("./interface").DefaultRecordType>[], extra: import("./interface").TableCurrentDataSource<import("./interface").DefaultRecordType>) => void>;
    };
    summaryFixed: {
        type: BooleanConstructor;
    };
    'onUpdate:selectedRowKeys': {
        type: import("vue").PropType<(selectedRowKeys: Key[], selectedRows: import("./interface").DefaultRecordType[]) => void>;
    };
    onScroll: {
        type: import("vue").PropType<(e: UIEvent) => void>;
    };
    'onUpdate:expandedRowKeys': {
        type: import("vue").PropType<(info: Key[]) => void>;
    };
    onResizeColumn: {
        type: import("vue").PropType<(w: number, col: import("./interface").ColumnType<import("./interface").DefaultRecordType>, action: import("./interface").ResizeActionType) => boolean | void>;
        default: any;
    };
    onRowDragEnd: {
        type: import("vue").PropType<(opt: import("./interface").DragRowEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    onColumnDragEnd: {
        type: import("vue").PropType<(opt: import("./interface").DragColumnEventInfo) => boolean | void | Promise<any>>;
        default: any;
    };
    'onUpdate:pagination': {
        type: import("vue").PropType<(info: import("./PaginationConfig").TablePaginationConfig) => void>;
    };
}>>>, {
    pagination: any;
    rowSelection: any;
}>;
export default _default;
