import type { Ref, UnwrapRef } from 'vue';
import type { Key, GetRowKey, DefaultRecordType, ExpandType, FlatRecord, CheckboxProps, TableRowSelection } from '../components/interface';
export declare type KeyEntities = Record<Key, FlatRecord & {
    children: FlatRecord[];
    parent: any;
}>;
export declare type FlattenRecordsType<T = DefaultRecordType> = {
    flattenData: Ref<FlatRecord<T>[]>;
    keyEntities: Ref<KeyEntities>;
    pageDataRowKeys: Ref<Key[]>;
    pageDataEnableRowKeys: Ref<Key[]>;
    checkboxPropsMap: Ref<Map<Key, Partial<CheckboxProps>>>;
    getRowFlattenIndexByKey: (key: Key) => number | undefined;
    isMyChildren: (parentKey: Key, childrenKey: Key) => boolean;
};
export declare function getPosition(level: string | number, index: number): string;
export default function useFlattenRecords<RecordType = DefaultRecordType>(pageDataRef: Ref<readonly RecordType[]>, childrenColumnNameRef: Ref<string>, expandedKeysRef: Ref<Set<Key>>, getRowKeyRef: Ref<GetRowKey<RecordType>>, expandType: Ref<ExpandType>, mergedRowSelection: Ref<TableRowSelection<RecordType> | undefined>): FlattenRecordsType<RecordType | UnwrapRef<RecordType>>;
