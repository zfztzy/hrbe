import type { ComputedRef, Ref } from 'vue';
import type { ColumnType, ColumnsType, SurelyTableProps, Key, FilterKey, FilterValue, FinallyColumnType } from '../components/interface';
export interface FilterState<RecordType> {
    column: ColumnType<RecordType>;
    key: Key;
    filteredKeys?: FilterKey;
    forceFiltered?: boolean;
}
export declare function generateFilterInfo<RecordType>(filterStates: FilterState<RecordType>[]): Record<string, FilterValue | null>;
export declare function getFilterData<RecordType>(data: RecordType[], filterStates: FilterState<RecordType>[]): RecordType[];
export declare function getNewColumnsByFilters<RecordType>(columns: ColumnsType<RecordType>, filterStates: FilterState<RecordType>[], pos?: string): ColumnsType<RecordType>;
export default function useFilter<RecordType>(_props: SurelyTableProps, sortedData: ComputedRef<RecordType[]>, allColumns: Ref<FinallyColumnType[]>, onFilterChange: (filters: Record<string, FilterValue | null>, filterStates: FilterState<RecordType>[]) => void): {
    filterStates: Ref<FilterState<RecordType>[]>;
    filters: ComputedRef<Record<string, FilterValue | null>>;
    filterData: ComputedRef<RecordType[]>;
    getFilters: (newFilterStates: FilterState<RecordType>[]) => RecordType[];
    changeFilter: (filterState: FilterState<RecordType>) => void;
};
