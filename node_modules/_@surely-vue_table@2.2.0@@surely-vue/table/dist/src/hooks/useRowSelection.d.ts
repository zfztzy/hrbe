import type { Ref } from 'vue';
import type { TableRowSelection, Key, GetRowKey, TableLocale, SelectionItem, CheckboxProps, SurelyTableProps, FlatRecord } from '../components/interface';
import type { DataEntity } from '../utils/conductUtil';
import type { KeyEntities } from './useFlattenRecords';
export declare const SELECTION_ALL: "SELECT_ALL";
export declare const SELECTION_INVERT: "SELECT_INVERT";
export declare const SELECTION_NONE: "SELECT_NONE";
interface UseSelectionConfig<RecordType> {
    prefixCls: Ref<string>;
    pageData: Ref<RecordType[]>;
    getRowKey: Ref<GetRowKey<RecordType>>;
    getRecordByKey: (key: Key) => RecordType;
    childrenColumnName: Ref<string>;
    flattenData: Ref<RecordType[]>;
    keyEntities: Ref<KeyEntities>;
    locale: Ref<TableLocale>;
    checkboxPropsMap: Ref<Map<Key, Partial<CheckboxProps>>>;
    allDataRowKeys: Ref<Key[]>;
    allDataRootRowKeys: Ref<Key[]>;
    pageDataRowKeys: Ref<Key[]>;
    pageDataEnableRowKeys: Ref<Key[]>;
}
export declare type SelectionsRes = {
    derivedSelectedKeySet: Ref<Set<Key>>;
    derivedHalfSelectedKeySet: Ref<Set<Key>>;
    derivedSelectedKeys: Ref<Key[]>;
    setSelectedKeys: (keys: Key[]) => void;
    triggerSingleSelection: (key: Key, selected: boolean, keys: Key[], event: Event) => void;
    mergedSelections: Ref<SelectionItem[]>;
    lastSelectedKey: Ref<Key>;
    setLastSelectedKey: (key: Key) => void;
    mergedRowSelection: Ref<TableRowSelection>;
    isCheckboxDisabled: (r: FlatRecord) => void;
    levelEntities: Ref<Map<number, Set<DataEntity>>>;
    maxLevel: Ref<number>;
    allDisabled: Ref<boolean>;
    allDisabledSomeChecked: Ref<boolean>;
    allDisabledAndChecked: Ref<boolean>;
    checkedCurrentAll: Ref<boolean>;
    checkedCurrentSome: Ref<boolean>;
};
export declare type INTERNAL_SELECTION_ITEM = SelectionItem | typeof SELECTION_ALL | typeof SELECTION_INVERT | typeof SELECTION_NONE;
export default function useSelection<RecordType>(props: SurelyTableProps, mergedRowSelection: Ref<TableRowSelection<RecordType> | undefined>, allData: Ref<any[]>, configRef: UseSelectionConfig<RecordType>): SelectionsRes;
export {};
