import type { ColumnsType, ColumnType, Key, SortOrder, SurelyTableProps, SorterResult, DefaultRecordType, FinallyColumnType } from '../components/interface';
import type { ComputedRef, Ref } from 'vue';
export interface SortState<RecordType = DefaultRecordType> {
    column: FinallyColumnType<RecordType>;
    key: Key;
    sortOrder: SortOrder | null;
    multiplePriority: number | false;
}
export declare const ASCEND = "ascend";
export declare const DESCEND = "descend";
export declare function getMultiplePriority<RecordType>(column: ColumnType<RecordType>): number | false;
export declare function nextSortDirection(sortDirections: SortOrder[], current: SortOrder | null): SortOrder;
export declare function getNewColumnsBySorter<RecordType>(columns: ColumnsType<RecordType>, sorterStates: SortState<RecordType>[], pos?: string): ColumnsType<RecordType>;
export default function useSorter<RecordType>(_props: SurelyTableProps, allData: Ref<any[]>, allColumns: Ref<FinallyColumnType[]>, onSorterChange: (sorterResult: SorterResult<RecordType> | SorterResult<RecordType>[], sortStates: SortState<RecordType>[]) => void): {
    sortedData: ComputedRef<any[]>;
    sorterStates: Ref<SortState<RecordType>[]>;
    sorter: ComputedRef<SorterResult<RecordType> | SorterResult<RecordType>[]>;
    getSorters: (newSorterStates: SortState<RecordType>[]) => SorterResult<RecordType> | SorterResult<RecordType>[];
    changeSorter: (sortState: SortState<RecordType>) => void;
};
