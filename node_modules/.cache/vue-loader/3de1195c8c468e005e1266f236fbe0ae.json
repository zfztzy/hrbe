{"remainingRequest":"/Users/macbookpro/Documents/hr-manage/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/macbookpro/Documents/hr-manage/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/macbookpro/Documents/hr-manage/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookpro/Documents/hr-manage/src/views/hr_manage_table/Applicant.vue?vue&type=template&id=849e999c&scoped=true&","dependencies":[{"path":"/Users/macbookpro/Documents/hr-manage/src/views/hr_manage_table/Applicant.vue","mtime":1646643486000},{"path":"/Users/macbookpro/Documents/hr-manage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/hr-manage/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/hr-manage/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/hr-manage/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}