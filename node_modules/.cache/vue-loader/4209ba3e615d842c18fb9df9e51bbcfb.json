{"remainingRequest":"/Users/macbookpro/Documents/hr-manage/node_modules/_vue-loader@15.9.8@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/macbookpro/Documents/hr-manage/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--1-0!/Users/macbookpro/Documents/hr-manage/node_modules/_vue-loader@15.9.8@vue-loader/lib/index.js??vue-loader-options!/Users/macbookpro/Documents/hr-manage/src/components/NewElement.vue?vue&type=template&id=095bd528&","dependencies":[{"path":"/Users/macbookpro/Documents/hr-manage/src/components/NewElement.vue","mtime":1648367976357},{"path":"/Users/macbookpro/Documents/hr-manage/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/hr-manage/node_modules/_vue-loader@15.9.8@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/hr-manage/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/hr-manage/node_modules/_vue-loader@15.9.8@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}